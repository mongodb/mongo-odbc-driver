# Evergreen Project Config

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# 12 minutes is the longest we'll ever run
exec_timeout_secs: 3600 # 12 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    - command: git.get_project
      params:
        directory: mongosql-odbc-driver

  "generate expansions":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          export PATH="$PATH:$HOME/.cargo/bin"
          export CARGO_NET_GIT_FETCH_WITH_CLI=true

          cat <<EOT > expansions.yml
          prepare_shell: |
            set -o errexit
            export PATH="$PATH"
            export CARGO_NET_GIT_FETCH_WITH_CLI="$CARGO_NET_GIT_FETCH_WITH_CLI"
            export UNIX_ODBC_PATH="$PWD/unixodbc/install"
            git config --global url."ssh://git@github.com/".insteadOf "https://github.com/"
            export ADF_TEST_LOCAL_USER="${adf_test_local_user}"
            export ADF_TEST_LOCAL_PWD="${adf_test_local_pwd}"
            export ADF_TEST_LOCAL_AUTH_DB="${adf_test_local_auth_db}"
            export ADF_TEST_LOCAL_HOST="${adf_test_local_host}"
            export MDB_TEST_LOCAL_PORT="${mdb_test_local_port}"
          EOT
    - command: expansions.update
      params:
        file: mongosql-odbc-driver/expansions.yml

  "install rust toolchain":
    - command: shell.exec
      params:
        shell: bash
        script: |
          ${prepare_shell}

          # make sure to use msvc toolchain rather than gnu, which is
          # the default for cygwin
          if [ "Windows_NT" == "$OS" ]; then
              if [ 'windows-64' == '${build_variant}' ]; then
                  export HOST="x86_64-pc-windows-msvc"
              else
                  echo 'unknown windows build variant ${build_variant}'
                  exit 1;
              fi
              export DEFAULT_HOST_OPTIONS="--default-host $HOST"
              export DEFAULT_TOOLCHAIN="stable-$HOST"
          fi

          # install rustup from scratch
          rm -rf ~/.rustup
          curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path $DEFAULT_HOST_OPTIONS

          # rustup installs into C:\Users\$USER instead of
          # C:\home\$USER, so we symlink both .rustup and .cargo
          if [ "Windows_NT" == "$OS" ]; then
              ln -sf /cygdrive/c/Users/$USER/.rustup/ ~/.rustup
              ln -sf /cygdrive/c/Users/$USER/.cargo/ ~/.cargo

              rustup toolchain install $DEFAULT_TOOLCHAIN
              rustup default $DEFAULT_TOOLCHAIN
          fi

          echo --------- rustup show -----------
          rustup show
          echo ----- Rustup toolchain list -----
          rustup toolchain list
          echo ---------------------------------

  "check clippy":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          cargo clippy --all-targets -- -D warnings

  "check rustfmt":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          cargo fmt --all --  --check

  "compile release":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          cargo build --release

  "upload artifact":
    - command: s3.put
      params:
        build_variants:
          - windows-64
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/target/release/mongoodbc.dll
        remote_file: mongosql-odbc-driver/artifacts/test/${version_id}/${build_variant}/mongoodbc.dll
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

  "download artifact":
    - command: s3.get
      params:
        build_variants:
          - windows-64
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/test/${version_id}/${build_variant}/mongoodbc.dll
        local_file: mongosql-odbc-driver/mongoodbc.dll
        bucket: mciuploads

  "setup driver on Windows":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script:  |
          ${prepare_shell}
          sed -i 's@%DRIVER_DLL_PATH%@'"$(echo "$(cygpath -w $(pwd))" | sed s',\\,\\\\\\\\,g')"'@' setup/setupDSN.reg
          reg import "setup\setupDSN.reg"
          echo "----- Registry entries after setup ----"
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\ODBC\ODBCINST.INI\ODBC Drivers" -s 2> nul
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers" -s 2> nul
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\ADF_ODBC_DRIVER" -s
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\ODBC\ODBCINST.INI\ADF_ODBC_DRIVER" -s 2> nul
          echo "-------------------------"

  "clean-up driver on Windows":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script:  |
          ${prepare_shell}
          if [ 'windows-32' == '${build_variant}' ]; then
            sed -i 's@SOFTWARE@'"SOFTWARE\\\\Wow6432Node"'@' setup/cleanup.reg
          fi
          reg import "setup\cleanup.reg"
          echo "----- Registry entries after clean-up----"
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\ODBC\ODBCINST.INI\ODBC Drivers" -s 2> nul
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers" -s 2> nul
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\ADF_ODBC_DRIVER" -s 2> nul
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\ODBC\ODBCINST.INI\ADF_ODBC_DRIVER" -s 2> nul
          echo "-------------------------"

  "run unit tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          RUST_BACKTRACE=1 cargo test unit

  "run integration tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          export RUST_BACKTRACE=1
          ./resources/run_adf.sh start &&
          cargo test integration
          EXITCODE=$?
          ./resources/run_adf.sh stop
          exit $EXITCODE

  "install unix odbc":
    - command: shell.exec
      type: system
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          mkdir -p "$UNIX_ODBC_PATH"
          cd unixodbc
          echo "downloading unixODBC"
          unixODBC_dir=unixODBC-2.3.6
          curl -O "http://noexpire.s3.amazonaws.com/sqlproxy/binary/linux/unixODBC-2.3.6.tar.gz" \
            --silent \
            --fail \
            --max-time 60 \
            --retry 5 \
            --retry-delay 0
          tar xf "$unixODBC_dir.tar.gz"
          cd "$unixODBC_dir"
          ./configure --prefix="$UNIX_ODBC_PATH" --with-pic
          make
          make install


  "run asan tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          ~/.cargo/bin/rustup default nightly
          ~/.cargo/bin/rustup target add x86_64-unknown-linux-gnu
          export LD_LIBRARY_PATH="$UNIX_ODBC_PATH/lib"
          export LIBRARY_PATH="$UNIX_ODBC_PATH/lib"
          export RUSTFLAGS="-Z sanitizer=address"
          # we only run asan on the unit tests for now
          cargo test --target x86_64-unknown-linux-gnu unit

pre:
  - func: "fetch source"
  - func: "generate expansions"
  - func: "install rust toolchain"

tasks:

  - name: clippy
    commands:
      - func: "check clippy"

  - name: rustfmt
    commands:
      - func: "check rustfmt"

  - name: compile
    commands:
      - func: "compile release"
      - func: "upload artifact"

  - name: unit-test
    commands:
      - func: "install rust toolchain"
      - func: "run unit tests"

  - name: integration-test
    depends_on:
      - name: compile
    commands:
      - func: "install rust toolchain"
      - func: "run integration tests"

  - name: asan
    commands:
      - func: "install unix odbc"
      - func: "run asan tests"

task_groups:
  - name: test-unit-group
    setup_group_can_fail_task: false
    setup_group:
      - func: "fetch source"
      - func: "generate expansions"
    tasks:
      - unit-test

  - name: test-integration-group
    setup_group_can_fail_task: false
    setup_group:
      - func: "fetch source"
      - func: "generate expansions"
      - func: "download artifact"
      - func: "setup driver on Windows"
    teardown_group:
      - func: "clean-up driver on Windows"
    tasks:
      - integration-test

buildvariants:

  - name: static-analysis
    display_name: "* Static Analysis"
    run_on: [ ubuntu1804-test ]
    tasks:
      - name: clippy
      - name: rustfmt

  - name: windows-64
    display_name: Windows (64-bit)
    run_on: [ windows-64-vs2019-large ]
    tasks:
      - name: compile
      - name: test-unit-group
      - name: test-integration-group


  - name: ubuntu2004
    display_name: Ubuntu 20.04
    run_on: [ ubuntu2004-large ]
    tasks:
      - name: asan
