# Evergreen Project Config

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# 12 minutes is the longest we'll ever run
exec_timeout_secs: 3600 # 12 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch for windows sign":
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/mongoodbc.msi
        local_file: mongosql-odbc-driver/installer/msi/mongoodbc.msi
        bucket: mciuploads

  "fetch for ubuntu sign":
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/mongoodbc.tar.gz
        local_file: mongosql-odbc-driver/installer/tgz/mongoodbc.tar.gz
        bucket: mciuploads

  "fetch source":
    - command: git.get_project
      params:
        directory: mongosql-odbc-driver

  "generate expansions":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          export CARGO_NET_GIT_FETCH_WITH_CLI=true
          export INSTALLED_ODBC_PATH="$PWD/installed_odbc/install"
          export LD_LIBRARY_PATH="$INSTALLED_ODBC_PATH/lib"
          export PATH="$LD_LIBRARY_PATH:$PATH:$HOME/.cargo/bin"
          export DUMP_FOLDER=dumps
          export LOCAL_DUMP_ORIGINAL_REG_VAL=local_dump_original_value.reg
          export MONGOODBC_DEBUGGING_INFO_ARCHIVE=crashDebuggingInfo
          export SCRIPT_FOLDER=resources
          if [[ "${triggered_by_git_tag}" != "" ]]; then
            export RELEASE_VERSION=$(echo ${triggered_by_git_tag} | sed s/v//)
          else
            export RELEASE_VERSION=snapshot
          fi

          cat <<EOT > expansions.yml
          RELEASE_VERSION: "$RELEASE_VERSION"
          prepare_shell: |
            set -o errexit
            export RELEASE_VERSION="$RELEASE_VERSION"
            export PATH="$PATH"
            export CARGO_NET_GIT_FETCH_WITH_CLI="$CARGO_NET_GIT_FETCH_WITH_CLI"
            git config --global url."ssh://git@github.com/".insteadOf "https://github.com/"
            export ADF_TEST_LOCAL_USER="${adf_test_local_user}"
            export ADF_TEST_LOCAL_PWD="${adf_test_local_pwd}"
            export ADF_TEST_LOCAL_AUTH_DB="${adf_test_local_auth_db}"
            export ADF_TEST_LOCAL_HOST="${adf_test_local_host}"
            export MDB_TEST_LOCAL_PORT="${mdb_test_local_port}"
            export ADF_TEST_LOCAL_DB="${adf_test_local_db}"
            export SCRIPT_FOLDER="$SCRIPT_FOLDER"
            export SCRIPT_DIR="$(pwd)/$SCRIPT_FOLDER"

            # Windows variables
            export LOCAL_DUMP_ORIGINAL_REG_VAL="$LOCAL_DUMP_ORIGINAL_REG_VAL"
            export DUMP_FOLDER="$DUMP_FOLDER"
            export DUMP_PATH="$(pwd)/$DUMP_FOLDER"
            export MONGOODBC_DEBUGGING_INFO_ARCHIVE=$MONGOODBC_DEBUGGING_INFO_ARCHIVE

            # Non-Windows variables
            export INSTALLED_ODBC_PATH="$INSTALLED_ODBC_PATH"
            export LD_LIBRARY_PATH="$LD_LIBRARY_PATH"
            export LIBRARY_PATH="$LD_LIBRARY_PATH"
            export ODBCSYSINI="$(pwd)"/setup
          EOT
    - command: expansions.update
      params:
        file: mongosql-odbc-driver/expansions.yml

  "install rust toolchain":
    - command: shell.exec
      params:
        shell: bash
        script: |
          ${prepare_shell}

          # make sure to use msvc toolchain rather than gnu, which is
          # the default for cygwin
          if [ "Windows_NT" == "$OS" ]; then
              if [ 'windows-64' == '${build_variant}' ]; then
                  export HOST="x86_64-pc-windows-msvc"
              else
                  echo 'unknown windows build variant ${build_variant}'
                  exit 1;
              fi
              export DEFAULT_HOST_OPTIONS="--default-host $HOST"
              export DEFAULT_TOOLCHAIN="stable-$HOST"
          fi

          # install rustup from scratch
          rm -rf ~/.rustup
          curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path $DEFAULT_HOST_OPTIONS

          # rustup installs into C:\Users\$USER instead of
          # C:\home\$USER, so we symlink both .rustup and .cargo
          if [ "Windows_NT" == "$OS" ]; then
              ln -sf /cygdrive/c/Users/$USER/.rustup/ ~/.rustup
              ln -sf /cygdrive/c/Users/$USER/.cargo/ ~/.cargo

              rustup toolchain install $DEFAULT_TOOLCHAIN
              rustup default $DEFAULT_TOOLCHAIN
          fi

          echo --------- rustup show -----------
          rustup show
          echo ----- Rustup toolchain list -----
          rustup toolchain list
          echo ---------------------------------

  "check clippy":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          cargo clippy --all-targets -- -D warnings

  "check packages version":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          cargo install cargo-get
          CARGO_PKGS_VERSION=$(cargo get -n --root="odbc/Cargo.toml" version --major --minor --patch --delimiter=".")
          if [[ "${triggered_by_git_tag}" == "" ]]; then
            EXPECTED_RELEASE_VERSION="0.0.0"
          else
            EXPECTED_RELEASE_VERSION="$RELEASE_VERSION"
          fi
          if [[ "$CARGO_PKGS_VERSION" != "$EXPECTED_RELEASE_VERSION" ]]; then
            echo "Expected version $EXPECTED_RELEASE_VERSION got $CARGO_PKGS_VERSION"
            exit 1
          fi

  "check rustfmt":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          cargo fmt --all --  --check

  "set packages version":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          #no-op when not triggered by a tag
          if [[ "${triggered_by_git_tag}" != "" ]]; then
            cargo install cargo-edit
            cargo set-version $RELEASE_VERSION
          fi

  "sign windows":
    - command: shell.exec
      type: system
      params:
        silent: true
        working_dir: mongosql-odbc-driver/installer/msi
        script: |
          echo "${signing_token_odbc_driver}" > ./signing_auth_token
    - command: shell.exec
      type: system
      params:
        working_dir: mongosql-odbc-driver/installer/msi
        script: |
          /usr/local/bin/notary-client.py \
              --key-name "bi-connector" \
              --auth-token-file ./signing_auth_token \
              --comment "Evergreen Automatic Signing (Atlas SQL ODBC) - ${version_id} - ${build_variant}" \
              --notary-url "${notary_client_url}" \
              mongoodbc.msi

  "sign ubuntu":
    - command: shell.exec
      type: system
      params:
        silent: true
        working_dir: mongosql-odbc-driver/installer/tgz
        script: |
          echo "${signing_token_odbc_driver}" > ./signing_auth_token
    - command: shell.exec
      type: system
      params:
        working_dir: mongosql-odbc-driver/installer/tgz
        script: |
          /usr/local/bin/notary-client.py \
              --key-name "bi-connector" \
              --auth-token-file ./signing_auth_token \
              --comment "Evergreen Automatic Signing (Atlas SQL ODBC) - ${version_id} - ${build_variant}" \
              --notary-url "${notary_client_url}" \
              mongoodbc.tar.gz

  "compile release":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          # Compile release build
          cargo build --release

          # Verify the version is the expected one from the driver perspective too
          cargo test api::get_info_tests::unit::driver_ver -- --nocapture

  "compile debug":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}

          # Compile debug build
          cargo build

  "compile release with debug info":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          echo "env $(env)"
          # Build a release driver with debug information
          cargo build --profile=release-with-debug
          export DRIVER_LIB_PATH=$PWD/target/release-with-debug

          cat <<EOT >> expansions.yml
            export DRIVER_LIB_PATH="$DRIVER_LIB_PATH"
          EOT
    - command: expansions.update
      params:
        file: mongosql-odbc-driver/expansions.yml

  "compile macos release":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          # Compile release build
          cargo build --release --features odbc-sys/iodbc

          # Verify the version is the expected one from the driver perspective too
          cargo test api::get_info_tests::unit::driver_ver -- --nocapture

  "compile macos debug":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          # Compile debug build
          cargo build --features odbc-sys/iodbc

  "compile macos release with debug info":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          echo "env $(env)"
          # Build a release driver with debug information
          cargo build --features odbc-sys/iodbc --profile=release-with-debug
          export DRIVER_LIB_PATH=$PWD/target/release-with-debug
          cat <<EOT >> expansions.yml
            export DRIVER_LIB_PATH="$DRIVER_LIB_PATH"
          EOT
    - command: expansions.update
      params:
        file: mongosql-odbc-driver/expansions.yml

  "build msi":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          cp target/release/*.dll installer/msi
          cp ./README.md installer/msi
          cd installer/msi
          if [ "$RELEASE_VERSION" == "snapshot" ]; then
              MINOR_VERSION="0.1"
              VERSION_LABEL="0.1.0"
          else
              MINOR_VERSION=$(echo "$RELEASE_VERSION" | sed 's|\([0-9]\+[.][0-9]\+\)[.][0-9]\+|\1|')
              VERSION_LABEL="$RELEASE_VERSION"
          fi
          # This UUID is used for the upgrade code and should be consistent across minor version_id
          # bug patches, that is why it is seeded with the minor version. Being consistent across
          # bug patches but different across minor versions allows for users to have multiple
          # minor versions of the driver installed side by side on Windows.
          UUID=$(uuidgen -m -N "mongoodbc_no_conflicts_$MINOR_VERSION" -n @oid)
          # unfortunately, using a variable to hold the path to powershell
          # seems to not work properly with evergreen's bash
          /cygdrive/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe\
              -NoProfile\
              -NoLogo\
              -NonInteractive\
              -ExecutionPolicy ByPass\
              -File ./build-msi.ps1\
              -Arch x64\
              -Version "$MINOR_VERSION"\
              -VersionLabel "$VERSION_LABEL"\
              -UpgradeCode "$UUID"

  "build dmg":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          cp target/release/*.dylib installer/dmg
          cp target/release/macos_postinstall installer/dmg
          cd installer/dmg
          if [ "$RELEASE_VERSION" == "snapshot" ]; then
              MINOR_VERSION="0.1"
          else
              MINOR_VERSION=$(echo "$RELEASE_VERSION" | sed 's|\([0-9]\+[.][0-9]\+\)[.][0-9]\+|\1|')
          fi
          ./build-dmg.sh "$MINOR_VERSION"


  "mciuploads release artifacts":
    - command: s3.put
      params:
        build_variants:
          - windows-64
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/target/release/atsql.dll
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/atsql.dll
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants:
          - windows-64
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/installer/msi/mongoodbc.msi
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/mongoodbc.msi
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants:
          - windows-64
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/target/release/atsqls.dll
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/atsqls.dll
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants:
          - windows-64
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/target/release/atsql.pdb
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/atsql.pdb
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants:
          - ubuntu2204
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/target/release/libatsql.so
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/libatsql.so
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants:
          - ubuntu2204
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/release/mongoodbc.tar.gz
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/mongoodbc.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants:
          - macos
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/target/release/libatsql.dylib
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/libatsql.dylib
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants:
          - macos
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/installer/dmg/mongoodbc.dmg
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/mongoodbc.dmg
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

  "mciuploads debug artifacts":
    - command: s3.put
      params:
        build_variants:
          - windows-64
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/target/debug/atsql.dll
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/debug/atsql.dll
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants:
          - windows-64
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/target/debug/atsqls.dll
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/debug/atsqls.dll
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants:
          - ubuntu2204
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/target/debug/libatsql.so
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/debug/libatsql.so
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants:
          - windows-64
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/target/debug/atsql.pdb
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/debug/atsql.pdb
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

  "upload signed windows artifacts":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/windows-64/release/mongoodbc-signed.msi
        local_file: mongosql-odbc-driver/installer/msi/mongoodbc-signed.msi
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

  "upload ubuntu sig file":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/ubuntu2204/release/mongoodbc.tar.gz.sig
        local_file: mongosql-odbc-driver/installer/tgz/mongoodbc.tar.gz.sig
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

  "upload release":
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/windows-64/release/mongoodbc-signed.msi
        local_file: mongosql-odbc-driver/release/mongoodbc-signed.msi
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/release/mongoodbc-signed.msi
        remote_file: mongosql-odbc-driver/windows/${RELEASE_VERSION}/pkg/mongoodbc.msi
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/windows-64/release/atsql.dll
        local_file: mongosql-odbc-driver/release/atsql.dll
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/release/atsql.dll
        remote_file: mongosql-odbc-driver/windows/${RELEASE_VERSION}/release/atsql.dll
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/windows-64/release/atsqls.dll
        local_file: mongosql-odbc-driver/release/atsqls.dll
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/release/atsqls.dll
        remote_file: mongosql-odbc-driver/windows/${RELEASE_VERSION}/release/atsqls.dll
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/windows-64/release/atsql.pdb
        local_file: mongosql-odbc-driver/release/atsql.pdb
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/release/atsql.pdb
        remote_file: mongosql-odbc-driver/windows/${RELEASE_VERSION}/release/atsql.pdb
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/ubuntu2204/release/mongoodbc.tar.gz
        local_file: mongosql-odbc-driver/target/release/mongoodbc.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/target/release/mongoodbc.tar.gz
        remote_file: mongosql-odbc-driver/ubuntu2204/${RELEASE_VERSION}/release/mongoodbc.tar.gz
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/ubuntu2204/release/mongoodbc.tar.gz.sig
        local_file: mongosql-odbc-driver/target/release/mongoodbc.tar.gz.sig
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/target/release/mongoodbc.tar.gz.sig
        remote_file: mongosql-odbc-driver/ubuntu2204/${RELEASE_VERSION}/release/mongoodbc.tar.gz.sig
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/ubuntu2204/release/libatsql.so
        local_file: mongosql-odbc-driver/target/release/libatsql.so
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/target/release/libatsql.so
        remote_file: mongosql-odbc-driver/ubuntu2204/${RELEASE_VERSION}/release/libatsql.so
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream

  "upload debug":
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/windows-64/debug/atsql.dll
        local_file: mongosql-odbc-driver/debug/atsql.dll
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/debug/atsql.dll
        remote_file: mongosql-odbc-driver/windows/${RELEASE_VERSION}/debug/atsql.dll
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/windows-64/debug/atsqls.dll
        local_file: mongosql-odbc-driver/debug/atsqls.dll
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/debug/atsqls.dll
        remote_file: mongosql-odbc-driver/windows/${RELEASE_VERSION}/debug/atsqls.dll
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/windows-64/debug/atsql.pdb
        local_file: mongosql-odbc-driver/debug/atsql.pdb
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/debug/atsql.pdb
        remote_file: mongosql-odbc-driver/windows/${RELEASE_VERSION}/debug/atsql.pdb
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/ubuntu2204/debug/libatsql.so
        local_file: mongosql-odbc-driver/target/debug/libatsql.so
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/target/debug/libatsql.so
        remote_file: mongosql-odbc-driver/ubuntu2204/${RELEASE_VERSION}/debug/libatsql.so
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream

  "download artifact":
    - command: s3.get
      params:
        build_variants:
          - windows-64
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/atsql.dll
        local_file: mongosql-odbc-driver/atsql.dll
        bucket: mciuploads
    - command: s3.get
      params:
        build_variants:
          - windows-64
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/atsqls.dll
        local_file: mongosql-odbc-driver/atsqls.dll
        bucket: mciuploads
    - command: s3.get
      params:
        build_variants:
          - ubuntu2204
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/libatsql.so
        local_file: mongosql-odbc-driver/libatsql.so
        bucket: mciuploads

  "tar linux artifacts":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script:  |
          mkdir -p release/mongoodbc/bin
          cp  target/release/libatsql.so release/mongoodbc/bin/
          cp ./LICENSE ./README.md release/mongoodbc/
          cd release
          tar -czvf mongoodbc.tar.gz mongoodbc/

  "setup driver on Windows":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          echo "Minor version: $MINOR_VERSION"
          sed -i 's@%DRIVER_DLL_PATH%@'"$(echo "$(cygpath -w $(pwd))" | sed s',\\,\\\\\\\\,g')"'@' setup/setupDSN.reg
          sed -i 's@%ADF_TEST_USER%@'"$(echo "${adf_test_local_user}" | sed s',\\,\\\\\\\\,g')"'@' setup/setupDSN.reg
          sed -i 's@%ADF_TEST_PWD%@'"$(echo "${adf_test_local_pwd}" | sed s',\\,\\\\\\\\,g')"'@' setup/setupDSN.reg
          sed -i 's@%ADF_TEST_URI%@'"$(echo "${adf_test_uri}" | sed s',\\,\\\\\\\\,g')"'@' setup/setupDSN.reg
          sed -i 's@%ADF_TEST_DB%@'"$(echo "${adf_test_local_db}" | sed s',\\,\\\\\\\\,g')"'@' setup/setupDSN.reg
          reg import "setup\setupDSN.reg"
          echo "----- Registry entries after setup ----"
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\ODBC\ODBCINST.INI\ODBC Drivers" -s 2> /dev/null
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers" -s 2> /dev/null
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\MongoDB Atlas SQL ODBC Driver" -s
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\ODBC\ODBCINST.INI\MongoDB Atlas SQL ODBC Driver" -s 2> /dev/null
          echo "-------------------------"

  "setup driver with UnixODBC":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          echo "-----   Setup driver with Unix ODBC   -----"
          # DRIVER_LIB_PATH should have been set by the compile task
          echo "DRIVER_LIB_PATH = $DRIVER_LIB_PATH"
          if [ ! -d  "$DRIVER_LIB_PATH" ]; then
            echo "$DRIVER_LIB_PATH directory does not exist. Built targets are:"
            ls ${DRIVER_LIB_PATH%/*}
          fi
          sed -i "s,%DRIVER_LIB_PATH%,$DRIVER_LIB_PATH,g" setup/odbcinst.ini
          echo "-------------------------"
          cat setup/odbcinst.ini
          echo "-------------------------"
          echo "----- DSN Setup -----"
          sed -i "s,%DRIVER_LIB_PATH%,$DRIVER_LIB_PATH,g" setup/odbc.ini
          sed -i "s,%ADF_TEST_DB%,${adf_test_local_db},g" setup/odbc.ini
          sed -i "s,%ADF_TEST_USER%,${adf_test_local_user},g" setup/odbc.ini
          sed -i "s,%ADF_TEST_PWD%,${adf_test_local_pwd},g" setup/odbc.ini
          sed -i "s,%ADF_TEST_HOST%,${adf_test_host},g" setup/odbc.ini
          cp setup/odbc.ini ~/.odbc.ini
          echo "---- END DSN Setup ----"

  "setup driver with iODBC":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          echo "-----   Setup driver with iODBC   -----"
          # DRIVER_LIB_PATH should have been set by the compile task
          echo "DRIVER_LIB_PATH = $DRIVER_LIB_PATH"
          if [ ! -d  "$DRIVER_LIB_PATH" ]; then
            echo "$DRIVER_LIB_PATH directory does not exist. Built targets are:"
            ls ${DRIVER_LIB_PATH%/*}
          fi
          sed -i.bu "s,%DRIVER_LIB_PATH%,$DRIVER_LIB_PATH,g" setup/iodbcinst.ini
          echo "-------------------------"
          cat setup/iodbcinst.ini
          echo "-------------------------"
          echo "----- DSN Setup -----"
          sed -i "s,%DRIVER_LIB_PATH%,$DRIVER_LIB_PATH,g" setup/iodbc.ini
          sed -i "s,%ADF_TEST_DB%,${adf_test_local_db},g" setup/iodbc.ini
          sed -i "s,%ADF_TEST_USER%,${adf_test_local_user},g" setup/iodbc.ini
          sed -i "s,%ADF_TEST_PWD%,${adf_test_local_pwd},g" setup/iodbc.ini
          sed -i "s,%ADF_TEST_HOST%,${adf_test_host},g" setup/iodbc.ini
          echo "---- END DSN Setup ----"

          cat <<EOT >> expansions.yml
            export ODBCINSTINI="$ODBCSYSINI/iodbcinst.ini"
            export ODBCINI="$ODBCSYSINI/iodbc.ini"
          EOT
    - command: expansions.update
      params:
        file: mongosql-odbc-driver/expansions.yml

  "setup crash dump collection":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          mkdir $DUMP_PATH
          set +e
          echo "----- Registry entries before setup ----"
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps"
          REGQUERY_EXITCODE=$?
          if [ $REGQUERY_EXITCODE -eq 0 ]; then
            # The key exists, save the values
            echo "Saving values in $LOCAL_DUMP_ORIGINAL_REG_VAL"
            reg export "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" $LOCAL_DUMP_ORIGINAL_REG_VAL
            echo "----- Saved entries ----"
            cat $LOCAL_DUMP_ORIGINAL_REG_VAL
            echo "-------------------------"
          fi
          set -e
          sed -i 's@%$DUMP_PATH%@'"$(echo "$(cygpath -w $(pwd))\\$DUMP_FOLDER" | sed s',\\,\\\\\\\\,g')"'@' setup/setup_dumps_collection.reg
          echo "----- setup_dumps_collection.reg content -----"
          cat setup/setup_dumps_collection.reg
          echo "-------------------------"
          reg import "setup\setup_dumps_collection.reg"
          echo "----- Registry entries after setup ----"
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" -s 2> /dev/null
          echo "-------------------------"
          echo "App Data = $AppData"

  "clean-up driver on Windows":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          if [ 'windows-32' == '${build_variant}' ]; then
            sed -i 's@SOFTWARE@'"SOFTWARE\\\\Wow6432Node"'@' setup/cleanup_driver.reg
          fi
          reg import "setup\cleanup_driver.reg"
          echo "----- Registry entries after clean-up----"
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\ODBC\ODBCINST.INI\ODBC Drivers" -s 2> /dev/null
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers" -s 2> /dev/null
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\MongoDB Atlas SQL ODBC Driver" -s 2> /dev/null
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\ODBC\ODBCINST.INI\MongoDB Atlas SQL ODBC Driver" -s 2> /dev/null
          echo "-------------------------"

  "clean-up crash dump collection":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          set +e
          # See what crash dump has been created. Checking the default path just in case
          echo "----- Dumps collected stored in $DUMP_PATH ----"
          ls -lrt $DUMP_PATH
          echo "-------------------------"
          echo "----- Dumps collected stored in the default dump folder %LOCALAPPDATA%\CrashDumps ----"
          ls -lrt /cygdrive/c/Users/Administrator/AppData/Local/CrashDumps
          echo "-------------------------"
          echo "----- Registry entries before clean-up ----"
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps"
          echo "-------------------------"
          if [ -f "$LOCAL_DUMP_ORIGINAL_REG_VAL" ]; then
            echo "Resetting initial registry values"
            cat $LOCAL_DUMP_ORIGINAL_REG_VAL
            reg import $LOCAL_DUMP_ORIGINAL_REG_VAL
          else
            echo "Resetting initial registry values - Deleting entry"
            reg import setup/cleanup_dumps_collection.reg
          fi
          EXITCODE=$?
          echo "----- Registry entries after clean-up ----"
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" -s 2> /dev/null
          echo "-------------------------"
          exit $EXITCODE

  "run windows unit tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          RUST_BACKTRACE=1 cargo test unit

  "run windows integration tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          set +e
          export RUST_BACKTRACE=1
          ./resources/run_adf.sh start &&
          cargo run --bin data_loader &&
          cargo test integration -- --nocapture
          EXITCODE=$?
          echo "****** ls -l ./target/debug/deps *******"
          ls -l ./target/debug/deps
          echo "****************************************"
          # The execution termimated with a segfault
          if [ $EXITCODE -eq 139 ]; then
            # Compress the sources and pdbs so that we'll have everything for debugging available in Evergreen after a run
            SOURCES_FOLDERS=$(find $(pwd) -path '*/src' | tr '\n' ' ')
            PDB_FILES=$(find $(pwd) -path '*/target/debug/deps/*test*.pdb' | tr '\n' ' ')
            echo "tar czvf "$DUMP_PATH/$MONGOODBC_DEBUGGING_INFO_ARCHIVE.tar.gz" $SOURCES_FOLDERS $PDB_FILES"
            tar czvf "$DUMP_PATH/$MONGOODBC_DEBUGGING_INFO_ARCHIVE.tar.gz" $SOURCES_FOLDERS $PDB_FILES

            echo "ls -l $DUMP_PATH"
            ls -l $DUMP_PATH
          fi
          ./resources/run_adf.sh stop
          exit $EXITCODE

  "install iODBC":
    - command: shell.exec
      type: system
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          mkdir -p "$INSTALLED_ODBC_PATH"
          cd installed_odbc
          echo "downloading iODBC"
          iODBC_dir=libiodbc-3.52.15
          curl -LO "https://github.com/openlink/iODBC/releases/download/v3.52.15/$iODBC_dir.tar.gz" \
            --silent \
            --fail \
            --max-time 60 \
            --retry 5 \
            --retry-delay 0
          tar xf "$iODBC_dir.tar.gz"
          cd "$iODBC_dir"
          ./configure --prefix="$INSTALLED_ODBC_PATH"
          make 
          make install

  "install unix odbc":
    - command: shell.exec
      type: system
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          mkdir -p "$INSTALLED_ODBC_PATH"
          cd installed_odbc
          echo "downloading unixODBC"
          unixODBC_dir=unixODBC-2.3.6
          curl -O "http://noexpire.s3.amazonaws.com/sqlproxy/binary/linux/unixODBC-2.3.6.tar.gz" \
            --silent \
            --fail \
            --max-time 60 \
            --retry 5 \
            --retry-delay 0
          tar xf "$unixODBC_dir.tar.gz"
          cd "$unixODBC_dir"
          ./configure --prefix="$INSTALLED_ODBC_PATH" --with-pic
          make
          make install

  "run ubuntu unit tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          ~/.cargo/bin/rustup default stable

          # we only run ubuntu on the unit tests for now
          cargo test unit

  "run ubuntu integration tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          set +e
          echo "-------- ODBC related env variable ----------"
          echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
          echo "LIBRARY_PATH = $LIBRARY_PATH"
          echo "ODBCSYSINI = $ODBCSYSINI"
          echo "----------------------------------------------"

          ~/.cargo/bin/rustup default stable

          export RUST_BACKTRACE=1
          # Start a local ADF
          ./resources/run_adf.sh start && cargo run --bin data_loader &&

          # Run integration tests with ubuntu
          cargo test integration
          EXITCODE=$?

          # Stop the local ADF
          ./resources/run_adf.sh stop
          exit $EXITCODE

  "run macos result-set tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          set +e
          echo "-------- ODBC related env variable ----------"
          echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
          echo "LIBRARY_PATH = $LIBRARY_PATH"
          echo "ODBCINSTINI = $ODBCINSTINI"
          echo "----------------------------------------------"

          ~/.cargo/bin/rustup default stable

          export RUST_BACKTRACE=1
          # Start a local ADF
          ./resources/run_adf.sh start && cargo run --bin data_loader &&

          # Run integration tests with macos
          cargo test --features odbc-sys/iodbc -- --ignored
          EXITCODE=$?

          # Stop the local ADF
          ./resources/run_adf.sh stop
          exit $EXITCODE

  "run macos unit tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          ~/.cargo/bin/rustup default stable

          cargo test unit

  "run macos integration tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          set +e
          echo "-------- ODBC related env variable ----------"
          echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
          echo "LIBRARY_PATH = $LIBRARY_PATH"
          echo "ODBCINSTINI = $ODBCINSTINI"
          echo "----------------------------------------------"

          ~/.cargo/bin/rustup default stable

          export RUST_BACKTRACE=1
          # Start a local ADF
          ./resources/run_adf.sh start && cargo run --bin data_loader &&

          # Run integration tests with macos
          cargo test --features odbc-sys/iodbc integration
          EXITCODE=$?

          # Stop the local ADF
          ./resources/run_adf.sh stop
          exit $EXITCODE

  "run ubuntu result-set tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          set +e
          echo "-------- ODBC related env variable ----------"
          echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
          echo "LIBRARY_PATH = $LIBRARY_PATH"
          echo "ODBCSYSINI = $ODBCSYSINI"
          echo "----------------------------------------------"

          ~/.cargo/bin/rustup default stable

          export RUST_BACKTRACE=1
          # Start a local ADF
          ./resources/run_adf.sh start && cargo run --bin data_loader &&

          # Run integration tests with ubuntu
          cargo test -- --ignored
          EXITCODE=$?

          # Stop the local ADF
          ./resources/run_adf.sh stop
          exit $EXITCODE

  "run asan unit tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          ~/.cargo/bin/rustup default nightly
          ~/.cargo/bin/rustup target add x86_64-unknown-linux-gnu

          export RUSTFLAGS="-Z sanitizer=address"
          # we only run asan on the unit tests for now
          cargo test --target x86_64-unknown-linux-gnu unit

  "run asan integration tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          set +e
          echo "-------- ODBC related env variable ----------"
          echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
          echo "LIBRARY_PATH = $LIBRARY_PATH"
          echo "ODBCSYSINI = $ODBCSYSINI"
          echo "----------------------------------------------"

          ~/.cargo/bin/rustup default nightly
          ~/.cargo/bin/rustup target add x86_64-unknown-linux-gnu

          export RUST_BACKTRACE=1
          # Start a local ADF
          ./resources/run_adf.sh start && cargo run --bin data_loader &&

          # Run integration tests with asan
          cargo test --target x86_64-unknown-linux-gnu integration
          EXITCODE=$?

          # Stop the local ADF
          ./resources/run_adf.sh stop
          exit $EXITCODE

  "run asan result-set tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          set +e
          echo "-------- ODBC related env variable ----------"
          echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
          echo "LIBRARY_PATH = $LIBRARY_PATH"
          echo "ODBCSYSINI = $ODBCSYSINI"
          echo "----------------------------------------------"

          ~/.cargo/bin/rustup default nightly
          ~/.cargo/bin/rustup target add x86_64-unknown-linux-gnu

          export RUST_BACKTRACE=1
          # Start a local ADF
          ./resources/run_adf.sh start && cargo run --bin data_loader &&

          # Run integration tests with asan
          cargo test --target x86_64-unknown-linux-gnu -- --ignored
          EXITCODE=$?

          # Stop the local ADF
          ./resources/run_adf.sh stop
          exit $EXITCODE

  "run windows result set test":
    command: shell.exec
    type: test
    params:
      shell: bash
      working_dir: mongosql-odbc-driver
      script: |
        ${prepare_shell}
        set +e
        export RUST_BACKTRACE=1
        ./resources/run_adf.sh start &&
        cargo run --bin data_loader &&
        cargo test -- --ignored
        EXITCODE=$?
        # The execution termimated with a segfault
        if [ $EXITCODE -eq 139 ]; then
            # Compress the sources and pdbs so that we'll have everything for debugging available in Evergreen after a run
            SOURCES_FOLDERS=$(find $(pwd) -path '*/src' | tr '\n' ' ')
            PDB_FILES=$(find $(pwd) -path '*/target/debug/deps/*test*.pdb' | tr '\n' ' ')
            echo "tar czvf "$DUMP_PATH/$MONGOODBC_DEBUGGING_INFO_ARCHIVE.tar.gz" $SOURCES_FOLDERS $PDB_FILES"
            tar czvf "$DUMP_PATH/$MONGOODBC_DEBUGGING_INFO_ARCHIVE.tar.gz" $SOURCES_FOLDERS $PDB_FILES
        fi
        ./resources/run_adf.sh stop
        exit $EXITCODE

  "upload start_adf logs":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/local_adf/logs/mongohoused.log
        remote_file: mongosql-odbc-driver/artifacts/logs/${version_id}/${build_variant}/mongohoused.log
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/local_adf/logs/mongodb_test.log
        remote_file: mongosql-odbc-driver/artifacts/logs/${version_id}/${build_variant}/mongodb_test.log
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

  "upload crash debugging info":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter_prefix: mongosql-odbc-driver/dumps
        local_files_include_filter:
          - "*.dmp"
          - "*.tar.gz"
        remote_file: mongosql-odbc-driver/artifacts/logs/${version_id}/${build_variant}/
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
        display_name: crash-dump-

pre:
  - func: "fetch source"
  - func: "generate expansions"
post:
  - func: "upload start_adf logs"

tasks:
  - name: clippy
    commands:
      - func: "install rust toolchain"
      - func: "check clippy"

  - name: rustfmt
    commands:
      - func: "install rust toolchain"
      - func: "check rustfmt"

  - name: compile
    depends_on:
    commands:
      - func: "install rust toolchain"
      - func: "install unix odbc"
        variants: [ubuntu2204]
      - func: "set packages version"
      - func: "check packages version"
      - func: "compile release"
      - func: "build msi"
        variants: [windows-64]
      - func: "tar linux artifacts"
        variants: [ubuntu2204]
      - func: "mciuploads release artifacts"

  - name: compile-macos
    depends_on:
    commands:
      - func: "install iODBC"
      - func: "set packages version"
      - func: "check packages version"
      - func: "compile macos release"
      - func: "build dmg"
      - func: "mciuploads release artifacts"

  - name: compile-debug
    commands:
      - func: "install rust toolchain"
      - func: "install unix odbc"
        variants: [ubuntu2204]
      - func: "set packages version"
      - func: "check packages version"
      - func: "compile debug"
      - func: "mciuploads debug artifacts"

  - name: compile-debug-macos
    commands:
      - func: "install iODBC"
      - func: "set packages version"
      - func: "check packages version"
      - func: "compile macos debug"
      - func: "mciuploads debug artifacts"

  - name: windows-unit-test
    commands:
      - func: "install rust toolchain"
      - func: "run windows unit tests"

  - name: windows-integration-test
    depends_on:
      - name: compile
    commands:
      - func: "install rust toolchain"
      - func: "run windows integration tests"

  - name: windows-result-set-test
    depends_on:
      - name: compile
    commands:
      - func: "install rust toolchain"
      - func: "run windows result set test"

  - name: windows-sign
    depends_on:
      - name: compile
    commands:
      - func: "fetch for windows sign"
      - func: "sign windows"
      - func: "upload signed windows artifacts"

  - name: ubuntu-unit-test
    commands:
      - func: "install rust toolchain"
      - func: "install unix odbc"
      - func: "run ubuntu unit tests"

  - name: ubuntu-integration-test
    commands:
      - func: "install rust toolchain"
      - func: "install unix odbc"
      - func: "compile release with debug info"
      - func: "setup driver with UnixODBC"
      - func: "run ubuntu integration tests"

  - name: ubuntu-result-set-test
    commands:
      - func: "install rust toolchain"
      - func: "install unix odbc"
      - func: "compile release with debug info"
      - func: "setup driver with UnixODBC"
      - func: "run ubuntu result-set tests"

  - name: ubuntu-sign
    depends_on:
      - name: compile
    commands:
      - func: "fetch for ubuntu sign"
      - func: "sign ubuntu"
      - func: "upload ubuntu sig file"

  - name: macos-unit-test
    commands:
      - func: "install iODBC"
      - func: "run macos unit tests"

  - name: macos-integration-test
    commands:
      - func: "install iODBC"
      - func: "compile macos release with debug info"
      - func: "setup driver with iODBC"
      - func: "run macos integration tests"

  - name: macos-result-set-test
    commands:
      - func: "install iODBC"
      - func: "compile macos release with debug info"
      - func: "setup driver with iODBC"
      - func: "run macos result-set tests"

  - name: asan-unit-test
    commands:
      - func: "install rust toolchain"
      - func: "install unix odbc"
      - func: "run asan unit tests"

  - name: asan-integration-test
    commands:
      - func: "install rust toolchain"
      - func: "install unix odbc"
      - func: "compile release with debug info"
      - func: "setup driver with UnixODBC"
      - func: "run asan integration tests"

  - name: asan-result-set-test
    commands:
      - func: "install rust toolchain"
      - func: "install unix odbc"
      - func: "compile release with debug info"
      - func: "setup driver with UnixODBC"
      - func: "run asan result-set tests"

  - name: snapshot
    depends_on:
      - name: compile
        variant: "*"
      - name: compile-debug
        variant: "*"
      - name: clippy
        variant: "*"
      - name: rustfmt
        variant: "*"
      - name: windows-unit-test
        variant: "windows-64"
      - name: windows-integration-test
        variant: "windows-64"
      - name: windows-result-set-test
        variant: "windows-64"
      - name: ubuntu-unit-test
        variant: "ubuntu2204"
      - name: ubuntu-integration-test
        variant: "ubuntu2204"
      - name: ubuntu-result-set-test
        variant: "ubuntu2204"
      - name: asan-unit-test
        variant: "*"
      - name: asan-integration-test
        variant: "*"
    commands:
      - func: "upload release"
      - func: "upload debug"

  - name: release
    git_tag_only: true
    depends_on:
      - name: compile
        variant: "*"
      - name: compile-debug
        variant: "*"
      - name: windows-sign
        variant: "windows-64"
      - name: ubuntu-sign
        variant: "ubuntu2204"
    commands:
      - func: "upload release"
      - func: "upload debug"

task_groups:
  - name: windows-windows-test-unit-group
    setup_group_can_fail_task: false
    setup_group:
      - func: "fetch source"
      - func: "generate expansions"
    tasks:
      - windows-unit-test

  - name: windows-test-integration-group
    setup_group_can_fail_task: false
    setup_group:
      - func: "fetch source"
      - func: "generate expansions"
      - func: "download artifact"
      - func: "setup driver on Windows"
      - func: "setup crash dump collection"
    teardown_group:
      - func: "upload crash debugging info"
      - func: "clean-up driver on Windows"
      - func: "clean-up crash dump collection"
    tasks:
      - windows-integration-test

  - name: windows-test-result-set-group
    setup_group_can_fail_task: false
    setup_group:
      - func: "fetch source"
      - func: "generate expansions"
      - func: "download artifact"
      - func: "setup driver on Windows"
      - func: "setup crash dump collection"
    teardown_group:
      - func: "upload crash debugging info"
      - func: "clean-up driver on Windows"
      - func: "clean-up crash dump collection"
    tasks:
      - windows-result-set-test

buildvariants:
  - name: static-analysis
    display_name: "* Static Analysis"
    run_on: [ubuntu2004-test]
    tasks:
      - name: clippy
      - name: rustfmt

  - name: windows-64
    display_name: Windows (64-bit)
    run_on: [windows-64-vs2019-large]
    tasks:
      - name: compile
      - name: compile-debug
      - name: windows-windows-test-unit-group
      - name: windows-test-integration-group
      - name: windows-test-result-set-group
      - name: windows-sign
        run_on: linux-64-amzn-build


  - name: ubuntu2204
    display_name: Ubuntu 22.04
    run_on: [ubuntu2204-large]
    tasks:
      - name: compile
      - name: compile-debug
      - name: ubuntu-unit-test
      - name: ubuntu-integration-test
      - name: ubuntu-result-set-test
      - name: asan-unit-test
      - name: asan-integration-test
      - name: asan-result-set-test
      - name: ubuntu-sign
        run_on: linux-64-amzn-build

  - name: macos
    display_name: "macOS 11.0"
    run_on: [macos-1100]
    tasks:
      - name: compile-macos
      - name: compile-debug-macos
      - name: macos-unit-test
      # Skip Reason: SQL-1332
      #- name: macos-integration-test
      #- name: macos-result-set-test

  - name: release
    display_name: "Release"
    run_on: [ubuntu2004-medium]
    tasks:
      - name: release
      - name: snapshot
