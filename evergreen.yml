# Evergreen Project Config

# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# 12 minutes is the longest we'll ever run
exec_timeout_secs: 3600 # 12 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "build odbc documentation":
    - command: subprocess.exec
      params:
        binary: bash
        working_dir: mongosql-odbc-driver
        args:
          - "./evergreen/make_docs.sh"
        add_expansions_to_env: true

  "upload odbc docs":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/docs/MongoDB_ODBC_Guide.pdf
        remote_file: mongosql-odbc-driver/artifacts/docs/MongoDB_ODBC_Guide.pdf
        bucket: mciuploads
        permissions: public-read
        content_type: application/pdf

  "fetch for windows sign":
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/${MSI_FILENAME}
        local_file: mongosql-odbc-driver/installer/msi/${MSI_FILENAME}
        bucket: mciuploads

  "fetch for ubuntu sign":
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/${UBUNTU_FILENAME}
        local_file: mongosql-odbc-driver/installer/tgz/${UBUNTU_FILENAME}
        bucket: mciuploads

  "fetch source":
    - command: git.get_project
      params:
        directory: mongosql-odbc-driver

  "fetch mongosqltranslate":
    - command: s3.get
      params:
        working_dir: mongosql-odbc-driver
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/target/release/${lib_prefix}mongosqltranslate.${ext}
        remote_file: mongosqltranslate/${lib_prefix}mongosqltranslate-v${LIBMONGOSQLTRANSLATE_VERSION}-${platform}-${arch}.${ext}
        bucket: translators-connectors-releases

  "generate expansions":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          export CARGO_NET_GIT_FETCH_WITH_CLI=true
          export INSTALLED_ODBC_PATH="$PWD/installed_odbc/install"
          export LD_LIBRARY_PATH="$INSTALLED_ODBC_PATH/lib"
          export PATH="$LD_LIBRARY_PATH:$PATH:$HOME/.cargo/bin"
          export DUMP_FOLDER=dumps
          export LOCAL_DUMP_ORIGINAL_REG_VAL=local_dump_original_value.reg
          export MONGOODBC_DEBUGGING_INFO_ARCHIVE=crashDebuggingInfo
          export SCRIPT_FOLDER=resources
          export COMPLIANCE_REPORT_NAME="mongo-odbc-driver_compliance_report.md"
          export STATIC_CODE_ANALYSIS_NAME="mongo-odbc-driver.sast.sarif"
          if [[ "${triggered_by_git_tag}" != "" ]]; then
            # tag should be formatted as `v<ODBC major>.<minor>.<patch>-libv<libmongosqltranslate major>.<minor>.<patch>`
            # we split on `-libv` to get the two versions
            export RELEASE_VERSION=$(echo ${triggered_by_git_tag} | awk -F'-libv' '{print $1}' | sed s/v// )
            export LIBMONGOSQLTRANSLATE_VERSION=$(echo ${triggered_by_git_tag}  | awk -F'-libv' '{print $2}')
          else
            export RELEASE_VERSION=snapshot
            export LIBMONGOSQLTRANSLATE_VERSION=snapshot
          fi
          export MSI_FILENAME="mongoodbc-eap-$RELEASE_VERSION.msi"
          export UBUNTU_FILENAME="mongoodbc-eap-$RELEASE_VERSION.tar.gz"

          cat <<EOT > expansions.yml
          RELEASE_VERSION: "$RELEASE_VERSION"
          LIBMONGOSQLTRANSLATE_VERSION: "$LIBMONGOSQLTRANSLATE_VERSION"
          MSI_FILENAME: "$MSI_FILENAME"
          UBUNTU_FILENAME: "$UBUNTU_FILENAME"
          WINDOWS_INSTALLER_PATH: "eap/mongosql-odbc-driver/windows/$RELEASE_VERSION-lib$LIBMONGOSQLTRANSLATE_VERSION/release/$MSI_FILENAME"
          UBUNTU2204_INSTALLER_PATH: "eap/mongosql-odbc-driver/ubuntu2204/$RELEASE_VERSION-lib$LIBMONGOTRANSLATE_VERSION/release/$UBUNTU_FILENAME"
          COMPLIANCE_REPORT_NAME: "$COMPLIANCE_REPORT_NAME"
          STATIC_CODE_ANALYSIS_NAME: "$STATIC_CODE_ANALYSIS_NAME"
          prepare_shell: |
            set -o errexit
            export RELEASE_VERSION="$RELEASE_VERSION"
            export LIBMONGOSQLTRANSLATE_VERSION="$LIBMONGOSQLTRANSLATE_VERSION"
            export MSI_FILENAME="$MSI_FILENAME"
            export UBUNTU_FILENAME="$UBUNTU_FILENAME"
            export WINDOWS_INSTALLER_PATH="$WINDOWS_INSTALLER_PATH"
            export UBUNTU2204_INSTALLER_PATH="$UBUNTU2204_INSTALLER_PATH"
            export PATH="$PATH"
            export CARGO_NET_GIT_FETCH_WITH_CLI="$CARGO_NET_GIT_FETCH_WITH_CLI"
            git config --global url."ssh://git@github.com/".insteadOf "https://github.com/"
            export LOCAL_MDB_PORT_COM=${local_mdb_port_com}
            export LOCAL_MDB_PORT_ENT=${local_mdb_port_ent}
            export LOCAL_MDB_USER=${local_mdb_user}
            export LOCAL_MDB_PWD=${local_mdb_pwd}
            export ADF_TEST_LOCAL_USER="${adf_test_local_user}"
            export ADF_TEST_LOCAL_PWD="${adf_test_local_pwd}"
            export ADF_TEST_LOCAL_AUTH_DB="${adf_test_local_auth_db}"
            export ADF_TEST_LOCAL_HOST="${adf_test_local_host}"
            export MDB_TEST_LOCAL_PORT="${mdb_test_local_port}"
            export ADF_TEST_LOCAL_DB="${adf_test_local_db}"
            export ADF_TEST_URI="${adf_test_uri}"
            export SRV_TEST_DB="${srv_test_db}"
            export SRV_TEST_AUTH_DB="${srv_test_auth_db}"
            export SRV_TEST_HOST="${srv_test_host}"
            export SRV_TEST_USER="${srv_test_user}"
            export SRV_TEST_PWD="${srv_test_pwd}"
            export SCRIPT_FOLDER="$SCRIPT_FOLDER"
            export SCRIPT_DIR="$(pwd)/$SCRIPT_FOLDER"
            export SBOM_DIR="sbom_tools"
            export SBOM_LICENSES="mongo-odbc-driver.licenses.cdx.json"
            export SBOM_VULN="mongo-odbc-driver.merge.grype.cdx.json"
            export SBOM_FINAL="mongo-odbc-driver.full.cdx.json"
            export COMPLIANCE_REPORT_NAME="$COMPLIANCE_REPORT_NAME"
            export STATIC_CODE_ANALYSIS_NAME="$STATIC_CODE_ANALYSIS_NAME"
            export ALLOW_VULNS="${AllowVulns}"

            # Windows variables
            export LOCAL_DUMP_ORIGINAL_REG_VAL="$LOCAL_DUMP_ORIGINAL_REG_VAL"
            export DUMP_FOLDER="$DUMP_FOLDER"
            export DUMP_PATH="$(pwd)/$DUMP_FOLDER"
            export MONGOODBC_DEBUGGING_INFO_ARCHIVE=$MONGOODBC_DEBUGGING_INFO_ARCHIVE

            # Non-Windows variables
            export INSTALLED_ODBC_PATH="$INSTALLED_ODBC_PATH"
            export LD_LIBRARY_PATH="$LD_LIBRARY_PATH"
            export LIBRARY_PATH="$LD_LIBRARY_PATH"
            export ODBCSYSINI="$(pwd)"/setup
          EOT
    - command: expansions.update
      params:
        file: mongosql-odbc-driver/expansions.yml

  "generate github token":
    command: github.generate_token
    params:
      owner: 10gen
      repo: mongohouse
      expansion_name: github_token

  "install rust toolchain":
    - command: shell.exec
      params:
        shell: bash
        script: |
          ${prepare_shell}

          # make sure to use msvc toolchain rather than gnu, which is
          # the default for cygwin
          if [ "Windows_NT" == "$OS" ]; then
              if [ 'windows-64' == '${build_variant}' ]; then
                  export HOST="x86_64-pc-windows-msvc"
              else
                  echo 'unknown windows build variant ${build_variant}'
                  exit 1;
              fi
              export DEFAULT_HOST_OPTIONS="--default-host $HOST"
              export DEFAULT_TOOLCHAIN="stable-$HOST"
          fi

          # install rustup from scratch
          rm -rf ~/.rustup
          curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path $DEFAULT_HOST_OPTIONS

          # rustup installs into C:\Users\$USER instead of
          # C:\home\$USER, so we symlink both .rustup and .cargo
          if [ "Windows_NT" == "$OS" ]; then
              ln -sf /cygdrive/c/Users/$USER/.rustup/ ~/.rustup
              ln -sf /cygdrive/c/Users/$USER/.cargo/ ~/.cargo

              rustup toolchain install $DEFAULT_TOOLCHAIN
              rustup default $DEFAULT_TOOLCHAIN
          fi

          echo --------- rustup show -----------
          rustup show
          echo ----- Rustup toolchain list -----
          rustup toolchain list
          echo ---------------------------------

  "check clippy":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          cargo clippy --all-targets -- -D warnings

  "check rustfmt":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          cargo fmt --all --  --check

  "check unused dependencies":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          cargo install cargo-machete
          set +e
          cargo machete
          RETURN=$?
          set -e
          if [ $RETURN -ne 0 ]; then
            >&2 echo "Unused dependencies found"
            >&2 cargo machete
          fi

  "generate SBOM":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          echo ">>>> Install SBOM tool..."

          OS=$(uname)
          echo "OS=$OS"
          ARCH="$(uname -m)"
          echo "Arch=$ARCH"

          mkdir $SBOM_DIR

          echo "SBOM with vulnerabilities: $SBOM_LICENSES";
          echo "SBOM with license: $SBOM_VULN";
          echo "Final SBOM with all information: $SBOM_FINAL"

          # Install cargo-cyclonedx
          echo "-- Installing cargo-cyclonedx --"
          cargo install cargo-cyclonedx
          echo "------------------------------------"

          # Install Grype
          echo "-- Downloading Grype --"
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b $SBOM_DIR
          echo "------------------------------------"

          # Install CycloneDX CLI and JQ
          CYCLONE_URL="https://github.com/CycloneDX/cyclonedx-cli/releases/download/v0.25.0"
          JQ_URL="https://github.com/jqlang/jq/releases/download/jq-1.7.1"
          if [[ "$OS" = "Linux" ]]; then
            if [[ "$ARCH" = "x86_64" ]]; then
              CYCLONE_URL="$CYCLONE_URL/cyclonedx-linux-x64"
              JQ_URL="$JQ_URL/jq-linux-amd64"
            elif [ "$ARCH" = "arm64" ]; then
              CYCLONE_URL="$CYCLONE_URL/cyclonedx-linux-arm64"
              JQ_URL="$JQ_URL/jq-linux-arm64"
            fi
          elif [[ "$OS" = "Darwin" ]]; then
            if [[ "$ARCH" = "arm64" ]]; then
              CYCLONE_URL="$CYCLONE_URL/cyclonedx-osx-arm64"
              JQ_URL="$JQ_URL/jq-macos-arm64"
            else
              CYCLONE_URL="$CYCLONE_URL/cyclonedx-osx-x64"
              JQ_URL="$JQ_URL/jq-macos-amd64"
            fi
          else
            # Windows
            CYCLONE_URL="$CYCLONE_URL/cyclonedx-win-x64.exe"
            JQ_URL="$JQ_URL/jq-windows-amd64.exe"
          fi

          echo "-- Downloading CycloneDX CLI  for $OS-$ARCH $CYCLONE_URL --"
          curl -L -o $SBOM_DIR/cyclonedx-cli "$CYCLONE_URL" \
            --silent \
            --fail \
            --max-time 60 \
            --retry 5 \
            --retry-delay 0
          chmod +x ./$SBOM_DIR/cyclonedx-cli
          echo "------------------------------------"

          echo "-- Downloading JQ $JQ_URL --"
          curl -L -o $SBOM_DIR/jq "$JQ_URL" \
            --silent \
            --fail \
            --max-time 60 \
            --retry 5 \
            --retry-delay 0
          chmod +x ./$SBOM_DIR/jq
          echo "------------------------------------"
          echo "<<<< Done installing SBOM tools"

          echo ">>>> Generate SBOM..."
          echo "--  Generating SBOMs with the licenses information --"
          cargo cyclonedx --target all -v -f json
          echo "------------------------------------"

          echo "-- Merging info from both mongo-odbc-driver and win_setupgui because both are packaged libraries --"
          echo "./$SBOM_DIR/cyclonedx-cli merge --input-files ./odbc/mongo-odbc-driver.cdx.json ./win_setupgui/win_setupgui.cdx.json --output-format json --input-format json --group mongo-odbc-driver --name mongo-odbc-driver> $SBOM_LICENSES"
          ./$SBOM_DIR/cyclonedx-cli merge --input-files ./odbc/mongo-odbc-driver.cdx.json ./win_setupgui/win_setupgui.cdx.json --output-format json --input-format json --group mongo-odbc-driver --name mongo-odbc-driver> $SBOM_LICENSES
          echo "------------------------------------"

          echo "-- Generating SBOM with vulnerabilities information --"
          echo "./$SBOM_DIR/grype sbom:$SBOM_LICENSES -o cyclonedx-json > $SBOM_VULN"
          ./$SBOM_DIR/grype sbom:$SBOM_LICENSES -o cyclonedx-json > $SBOM_VULN
          echo "------------------------------------"

          echo "-- Merging the SBOMs with the licenses information and the SBOM with the  vulnerabilities information in $SBOM_FINAL --"

          temp_output="temp_output.json"
          if [[ -f "$temp_output" ]] ; then
              rm "$temp_output"
          fi
          touch $temp_output

          while IFS= read -r line
          do
            if [[ "$line" == *"purl"* ]]; then
              bash_purl=$(echo $line | cut -d '"' -f4)
              command=$(echo "./$SBOM_DIR/jq '.components[] | select(.purl == \"$bash_purl\").licenses' $SBOM_LICENSES | ./$SBOM_DIR/jq -s 'flatten(1)'")
              # Add the license information back in the augmented SBOM.
              licenseInfo=$(eval " $command")
              if [[ -z "$licenseInfo" ]]; then
                echo "\"licenses\" : []," >> $temp_output
              else
                echo "\"licenses\" : $licenseInfo," >> $temp_output
              fi
            fi
            echo "$line" >> $temp_output

          done < $SBOM_VULN
          echo "------------------------------------"

          echo "--  Adding the name of the team responsible for each dependency as required by Silk and format the json file --"
          echo "./$SBOM_DIR/jq '.components[].properties += [{\"name\": \"internal:team_responsible\", \"value\": \"Atlas SQL\"}]' $temp_output > $SBOM_FINAL"
          ./$SBOM_DIR/jq '.components[].properties += [{"name": "internal:team_responsible", "value": "Atlas SQL"}]' $temp_output > $SBOM_FINAL
          echo "------------------------------------"

          echo "-- Adding VEX info for vulnerabilities still present in SBOM--"
          IFS=','; for vuln_id in $ALLOW_VULNS; do
            echo "-- Updating SBOM with VEX info for vulnerability with id $vuln_id--"
            export VULN_ID=$vuln_id
            echo "jq --argjson vexinfo "$(<resources/ssdlc/$VULN_ID.analysis.json)" '(.vulnerabilities[] | select(.id == $ENV.VULN_ID)).analysis = ($vexinfo) ' $SBOM_FINAL > output.tmp && mv output.tmp $SBOM_FINAL"
            jq --argjson vexinfo "$(<resources/ssdlc/$VULN_ID.analysis.json)" '(.vulnerabilities[] | select(.id == $ENV.VULN_ID)).analysis = ($vexinfo) ' $SBOM_FINAL > output.tmp && mv output.tmp $SBOM_FINAL
            echo "--------"
          done
          echo "-----------------------------"
          echo "<<<< Done generating SBOM"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          - mongosql-odbc-driver/*.cdx.json
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/ssdlc/
        content_type: text/plain
        bucket: mciuploads
        permissions: public-read

  "scan SBOM":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}

          echo ">>>> Scan SBOM for vulnerabilities..."
          if [[ "$ALLOW_VULNS" != "" ]]; then
            echo "Vulnerability ids to ignore : $ALLOW_VULNS"

            echo "-- Generate .grype.yaml specifying vulnerabilities to ignore --"
            GRYPE_CONF_FILE=".grype.yaml"
            touch $GRYPE_CONF_FILE
            echo "ignore:" > $GRYPE_CONF_FILE

            IFS=','; for VULN_ID in $ALLOW_VULNS; do
              echo "Ignoring vulnerability with id $VULN_ID"
              echo "    - vulnerability: $VULN_ID" >> $GRYPE_CONF_FILE
            done
            echo "------------------------------------"
          fi

          echo "-- Scanning dependency for vulnerabilities --"
          ./$SBOM_DIR/grype sbom:$SBOM_LICENSES --fail-on low
          echo "---------------------------------------------"
          echo "<<<< Done scanning SBOM"

  "generate compliance report":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        env:
          IS_TAG_TRIGGERED: "${triggered_by_git_tag}"
          AUTHOR: "${author}"
          AUTHOR_EMAIL: "${author_email}"
        script: |
          ${prepare_shell}
          echo "Author = $AUTHOR"
          echo "Author email = $AUTHOR_EMAIL"
          echo "Version = $RELEASE_VERSION"
          SBOM_URL="https://translators-connectors-releases.s3.amazonaws.com/mongosql-odbc-driver/mongosql-odbc-${RELEASE_VERSION}.sbom.json"
          SARIF_URL="https://translators-connectors-releases.s3.amazonaws.com/mongosql-odbc-driver/mongo-odbc-$RELEASE_VERSION.sast.sarif"
          echo "Sbom url = $SBOM_URL"
          echo "Sarif Url = $SARIF_URL"

          # Copy template
          cp resources/ssdlc/mongo-odbc-driver_compliance_report_template.md $COMPLIANCE_REPORT_NAME

          # Update the version
          sed -i.bu "s,%VERSION%,$RELEASE_VERSION,g" $COMPLIANCE_REPORT_NAME
          # Update the SBOM link
          sed -i.bu "s,%SBOM_URL%,$SBOM_URL,g" $COMPLIANCE_REPORT_NAME
          # Update the SARIF link
          sed -i.bu "s,%SARIF_URL%,$SARIF_URL,g" $COMPLIANCE_REPORT_NAME
          # Update the author information
          sed -i.bu "s,%AUTHOR%,$AUTHOR,g" $COMPLIANCE_REPORT_NAME
          sed -i.bu "s,%AUTHOR_EMAIL%,$AUTHOR_EMAIL,g" $COMPLIANCE_REPORT_NAME
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/${COMPLIANCE_REPORT_NAME}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/ssdlc/${COMPLIANCE_REPORT_NAME}
        content_type: text/markdown
        bucket: mciuploads
        permissions: public-read

  "publish compliance report":
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/${COMPLIANCE_REPORT_NAME}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/ssdlc/${COMPLIANCE_REPORT_NAME}
        content_type: text/markdown
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/${COMPLIANCE_REPORT_NAME}
        remote_file: mongosql-odbc-driver/mongosql-odbc-${RELEASE_VERSION}-compliance-report.md
        content_type: text/markdown
        bucket: translators-connectors-releases
        permissions: public-read
        display_name: mongosql-odbc-${RELEASE_VERSION}-compliance-report.md

  "push SBOM Lite to Silk":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          cat << EOF > silkbomb.env
          SILK_CLIENT_ID=${SILK_CLIENT_ID}
          SILK_CLIENT_SECRET=${SILK_CLIENT_SECRET}
          EOF

          echo "SBOM_FINAL = $SBOM_FINAL"

          echo "-- Uploading initial SBOM Lite to Silk --"
          docker run -i --platform="linux/amd64" --rm -v "$PWD":/pwd \
          --env-file silkbomb.env \
          artifactory.corp.mongodb.com/release-tools-container-registry-public-local/silkbomb:1.0 \
          upload --silk-asset-group ${SILK_ASSET_GROUP} --sbom-in /pwd/$SBOM_FINAL --force
          echo "-------------------------------"

  "pull augmented SBOM from Silk":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}

          cat << EOF > silkbomb.env
          SILK_CLIENT_ID=${SILK_CLIENT_ID}
          SILK_CLIENT_SECRET=${SILK_CLIENT_SECRET}
          EOF

          echo "-- Downloading augmented SBOM --"
          docker run -i --platform="linux/amd64" --rm -v "$PWD":/pwd \
          --env-file silkbomb.env \
          artifactory.corp.mongodb.com/release-tools-container-registry-public-local/silkbomb:1.0 \
          download --silk-asset-group ${SILK_ASSET_GROUP} --sbom-out /pwd/mongo-odbc-driver.augmented.sbom.json
          echo "-------------------------------"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/mongo-odbc-driver.augmented.sbom.json
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/ssdlc/mongo-odbc-driver.augmented.sbom.json
        content_type: application/json
        bucket: mciuploads
        permissions: public-read

  "publish augmented SBOM":
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/mongo-odbc-driver.augmented.sbom.json
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/ssdlc/mongo-odbc-driver.augmented.sbom.json
        content_type: application/json
        bucket: mciuploads
        permissions: public-read
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/mongo-odbc-driver.augmented.sbom.json
        remote_file: mongosql-odbc-driver/mongosql-odbc-${RELEASE_VERSION}.sbom.json
        bucket: translators-connectors-releases
        content_type: application/json
        permissions: public-read
        display_name: mongosql-odbc-${RELEASE_VERSION}.sbom.json

  "set and check packages version":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          #no-op when not triggered by a tag
          if [[ "${triggered_by_git_tag}" != "" ]]; then
            cargo install cargo-edit
            cargo set-version $RELEASE_VERSION
          fi
          cargo install cargo-get
          CARGO_PKGS_VERSION=$(cargo get --entry="odbc/Cargo.toml" package.version)
          if [[ "${triggered_by_git_tag}" == "" ]]; then
            EXPECTED_RELEASE_VERSION="0.0.0"
          else
            EXPECTED_RELEASE_VERSION="$RELEASE_VERSION"
          fi
          if [[ "$CARGO_PKGS_VERSION" != "$EXPECTED_RELEASE_VERSION" ]]; then
            echo "Expected version $EXPECTED_RELEASE_VERSION got $CARGO_PKGS_VERSION"
            exit 1
          fi

  "sign windows":
    - command: shell.exec
      type: system
      params:
        silent: true
        script: |
          docker login --username ${sql_engines_artifactory_username} --password ${sql_engines_artifactory_auth_token} ${release_tools_container_registry}
    - command: shell.exec
      type: system
      params:
        silent: true
        env:
          GRS_CONFIG_USER1_USERNAME: "${odbc_garasign_username}"
          GRS_CONFIG_USER1_PASSWORD: "${odbc_garasign_password}"
        working_dir: mongosql-odbc-driver/installer/msi
        script: |
          docker run \
            -e GRS_CONFIG_USER1_USERNAME \
            -e GRS_CONFIG_USER1_PASSWORD \
            --rm \
            -v $(pwd):$(pwd) -w $(pwd) \
            ${garasign_jsign_image} \
            /bin/bash -c "jsign -a ${authenticode_key_name} --replace --tsaurl http://timestamp.digicert.com -d SHA-256 ${MSI_FILENAME}"

          # Generating checksums
          if [ -e $msi_filename ]; then
            shasum -a 1 ${MSI_FILENAME} | tee ${MSI_FILENAME}.sha1
            shasum -a 256 ${MSI_FILENAME} | tee ${MSI_FILENAME}.sha256
            md5sum ${MSI_FILENAME} | tee ${MSI_FILENAME}.md5
          else
            echo "${MSI_FILENAME} does not exist. Skipping checksum generation"
          fi

  "sign ubuntu and verify signature":
    - command: shell.exec
      type: system
      params:
        silent: true
        script: |
          docker login --username ${sql_engines_artifactory_username} --password ${sql_engines_artifactory_auth_token} ${release_tools_container_registry}
    - command: shell.exec
      type: system
      params:
        silent: true
        env:
          GRS_CONFIG_USER1_USERNAME: "${odbc_garasign_username}"
          GRS_CONFIG_USER1_PASSWORD: "${odbc_garasign_password}"
        working_dir: mongosql-odbc-driver/installer/tgz
        script: |
          docker run \
            -e GRS_CONFIG_USER1_USERNAME \
            -e GRS_CONFIG_USER1_PASSWORD \
            --rm \
            -v $(pwd):$(pwd) -w $(pwd) \
            ${garasign_gpg_image} \
            /bin/bash -c "gpgloader && gpg --yes -v --armor -o ${UBUNTU_FILENAME}.sig --detach-sign ${UBUNTU_FILENAME}"
    - command: shell.exec
      type: system
      params:
        working_dir: mongosql-odbc-driver/installer/tgz
        silent: true
        env:
          GRS_CONFIG_USER1_USERNAME: "${odbc_garasign_username}"
          GRS_CONFIG_USER1_PASSWORD: "${odbc_garasign_password}"
        script: |
          docker run \
            -e GRS_CONFIG_USER1_USERNAME \
            -e GRS_CONFIG_USER1_PASSWORD \
            --rm \
            -v $(pwd):$(pwd) -w $(pwd) \
            ${garasign_gpg_image} \
            /bin/bash -c "gpgloader && gpg --verify ${UBUNTU_FILENAME}.sig ${UBUNTU_FILENAME}"

  "compile ubuntu and win release":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          # Compile release build
          cargo build --release

          # Verify the version is the expected one from the driver perspective too
          cargo test api::get_info_tests::unit::driver_ver -- --nocapture

  "compile ubuntu and win debug":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}

          # Compile debug build
          cargo build

  "compile ubuntu with asan":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          ~/.cargo/bin/rustup default nightly
          ~/.cargo/bin/rustup target add x86_64-unknown-linux-gnu

          export RUSTFLAGS="-Z sanitizer=address"

          cargo build --target x86_64-unknown-linux-gnu

  "compile release with debug info":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          echo "env $(env)"
          # Build a release driver with debug information
          cargo build --release
          export DRIVER_LIB_PATH=$PWD/target/release

          cat <<EOT >> expansions.yml
            export DRIVER_LIB_PATH="$DRIVER_LIB_PATH"
          EOT
    - command: expansions.update
      params:
        file: mongosql-odbc-driver/expansions.yml

  "compile macos release":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          # Compile release build
          cargo build --release --features definitions/iodbc,cstr/utf32

          # Verify the version is the expected one from the driver perspective too
          cargo test api::get_info_tests::unit::driver_ver -- --nocapture

  "compile macos debug":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          # Compile debug build
          cargo build --features definitions/iodbc,cstr/utf32

  "compile macos release with debug info":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          echo "env $(env)"
          # Build a release driver with debug information
          cargo build --features definitions/iodbc,cstr/utf32 --release
          export DRIVER_LIB_PATH=$PWD/target/release
          cat <<EOT >> expansions.yml
            export DRIVER_LIB_PATH="$DRIVER_LIB_PATH"
          EOT
    - command: expansions.update
      params:
        file: mongosql-odbc-driver/expansions.yml

  "build msi":
    # TODO: Uncomment prior to merging back into master
    # - command: s3.get
    #   params:
    #     aws_key: ${aws_key}
    #     aws_secret: ${aws_secret}
    #     local_file: mongosql-odbc-driver/mongo-odbc-driver.augmented.sbom.json
    #     remote_file: mongosql-odbc-driver/artifacts/${version_id}/ssdlc/mongo-odbc-driver.augmented.sbom.json
    #     content_type: application/json
    #     bucket: mciuploads
    #     permissions: public-read
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          # Delete mock library to prevent it from getting bundled in
          rm target/release/mock_mongosqltranslate.dll

          cp target/release/*.dll installer/msi
          # TODO: Uncomment prior to merging back into master
          # cp ./README.md ./mongo-odbc-driver.augmented.sbom.json installer/msi
          # TODO: Delete the following line prior to merging back into master
          cp ./README.md installer/msi
          cd installer/msi
          if [ "$RELEASE_VERSION" == "snapshot" ]; then
              MINOR_VERSION="0.1"
              VERSION_LABEL="0.1.0"
          else
              MINOR_VERSION=$(echo "$RELEASE_VERSION" | cut -d '.' -f 1-2)
              VERSION_LABEL="$RELEASE_VERSION"
          fi

          # unfortunately, using a variable to hold the path to powershell
          # seems to not work properly with evergreen's bash
          /cygdrive/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe\
              -NoProfile\
              -NoLogo\
              -NonInteractive\
              -ExecutionPolicy ByPass\
              -File ./build-msi.ps1\
              -Arch x64\
              -Version "$MINOR_VERSION"\
              -VersionLabel "$VERSION_LABEL"\

  "build dmg":
    # TODO: Uncomment prior to merging back into master
    # - command: s3.get
    #   params:
    #     aws_key: ${aws_key}
    #     aws_secret: ${aws_secret}
    #     local_file: mongosql-odbc-driver/mongo-odbc-driver.augmented.sbom.json
    #     remote_file: mongosql-odbc-driver/artifacts/${version_id}/ssdlc/mongo-odbc-driver.augmented.sbom.json
    #     content_type: application/json
    #     bucket: mciuploads
    #     permissions: public-read
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          # Delete mock library to prevent it from getting bundled in
          rm target/release/libmock_mongosqltranslate.dylib

          cp target/release/*.dylib installer/dmg
          cp target/release/macos_postinstall installer/dmg
          cd installer/dmg
          if [ "$RELEASE_VERSION" == "snapshot" ]; then
              MINOR_VERSION="0.1"
          else
              MINOR_VERSION=$(echo "$RELEASE_VERSION" | sed 's|\([0-9]\+[.][0-9]\+\)[.][0-9]\+|\1|')
          fi
          ./build-dmg.sh "$MINOR_VERSION"

  "mciuploads release artifacts":
    - command: s3.put
      params:
        build_variants:
          - windows-64
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/target/release/atsql.dll
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/atsql.dll
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants:
          - windows-64
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/installer/msi/mongoodbc.msi
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/${MSI_FILENAME}
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants:
          - windows-64
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/target/release/atsqls.dll
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/atsqls.dll
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants:
          - windows-64
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/target/release/atsql.pdb
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/atsql.pdb
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants:
          - ubuntu2204
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/target/release/libatsql.so
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/libatsql.so
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants:
          - ubuntu2204
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/release/${UBUNTU_FILENAME}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/${UBUNTU_FILENAME}
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants:
          - macos
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/target/release/libatsql.dylib
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/libatsql.dylib
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        build_variants:
          - macos
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/installer/dmg/mongoodbc.dmg
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/mongoodbc.dmg
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

  "upload signed windows artifacts":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/windows-64/release/mongoodbc-signed.msi
        local_file: mongosql-odbc-driver/installer/msi/${MSI_FILENAME}
        bucket: mciuploads
        permissions: public-read
        display_name: mongoodbc-signed.msi
        content_type: application/octet-stream
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/windows-64/release/mongoodbc-signed.msi.sha256
        local_file: mongosql-odbc-driver/installer/msi/${MSI_FILENAME}.sha256
        bucket: mciuploads
        permissions: public-read
        display_name: mongoodbc-signed.msi.sha256
        content_type: application/octet-stream

  "upload ubuntu sig file":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/ubuntu2204/release/${UBUNTU_FILENAME}.sig
        local_file: mongosql-odbc-driver/installer/tgz/${UBUNTU_FILENAME}.sig
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

  "upload release":
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/docs/MongoDB_ODBC_Guide.pdf
        local_file: mongosql-odbc-driver/release/docs/MongoDB_ODBC_Guide.pdf
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/release/docs/MongoDB_ODBC_Guide.pdf
        remote_file: eap/mongodb-odbc-driver/docs/MongoDB_ODBC_Guide.pdf
        bucket: translators-connectors-releases
        permissions: public-read
        skip_existing: false
        content_type: application/pdf
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/windows-64/release/mongoodbc-signed.msi
        local_file: mongosql-odbc-driver/release/mongoodbc-signed.msi
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/release/mongoodbc-signed.msi
        remote_file: ${WINDOWS_INSTALLER_PATH}
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
        display_name: ${MSI_FILENAME}
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/windows-64/release/mongoodbc-signed.msi.sha256
        local_file: mongosql-odbc-driver/release/mongoodbc-signed.msi.sha256
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/release/mongoodbc-signed.msi.sha256
        remote_file: ${WINDOWS_INSTALLER_PATH}.sha256
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
        display_name: ${MSI_FILENAME}.sha256
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/windows-64/release/atsql.dll
        local_file: mongosql-odbc-driver/release/atsql.dll
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/release/atsql.dll
        remote_file: eap/mongosql-odbc-driver/windows/${RELEASE_VERSION}/release/atsql.dll
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/windows-64/release/atsqls.dll
        local_file: mongosql-odbc-driver/release/atsqls.dll
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/release/atsqls.dll
        remote_file: eap/mongosql-odbc-driver/windows/${RELEASE_VERSION}/release/atsqls.dll
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/windows-64/release/atsql.pdb
        local_file: mongosql-odbc-driver/release/atsql.pdb
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/release/atsql.pdb
        remote_file: eap/mongosql-odbc-driver/windows/${RELEASE_VERSION}/release/atsql.pdb
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/ubuntu2204/release/${UBUNTU_FILENAME}
        local_file: mongosql-odbc-driver/target/release/${UBUNTU_FILENAME}
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/target/release/${UBUNTU_FILENAME}
        remote_file: ${UBUNTU2204_INSTALLER_PATH}
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/ubuntu2204/release/${UBUNTU_FILENAME}.sig
        local_file: mongosql-odbc-driver/target/release/${UBUNTU_FILENAME}.sig
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/target/release/${UBUNTU_FILENAME}.sig
        remote_file: eap/mongosql-odbc-driver/ubuntu2204/${RELEASE_VERSION}/release/${UBUNTU_FILENAME}.sig
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/ubuntu2204/release/libatsql.so
        local_file: mongosql-odbc-driver/target/release/libatsql.so
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/target/release/libatsql.so
        remote_file: eap/mongosql-odbc-driver/ubuntu2204/${RELEASE_VERSION}/release/libatsql.so
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream

  "download artifact":
    - command: s3.get
      params:
        build_variants:
          - windows-64
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/atsql.dll
        local_file: mongosql-odbc-driver/atsql.dll
        bucket: mciuploads
    - command: s3.get
      params:
        build_variants:
          - windows-64
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/atsqls.dll
        local_file: mongosql-odbc-driver/atsqls.dll
        bucket: mciuploads
    - command: s3.get
      params:
        build_variants:
          - ubuntu2204
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/${build_variant}/release/libatsql.so
        local_file: mongosql-odbc-driver/libatsql.so
        bucket: mciuploads

  "tar linux artifacts":
    # TODO: Uncomment prior to merging back into master
    # - command: s3.get
    #   params:
    #     aws_key: ${aws_key}
    #     aws_secret: ${aws_secret}
    #     local_file: mongosql-odbc-driver/mongo-odbc-driver.augmented.sbom.json
    #     remote_file: mongosql-odbc-driver/artifacts/${version_id}/ssdlc/mongo-odbc-driver.augmented.sbom.json
    #     content_type: application/json
    #     bucket: mciuploads
    #     permissions: public-read
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          # Delete mock library to prevent it from getting bundled in
          rm target/release/libmock_mongosqltranslate.so

          mkdir -p release/mongoodbc/bin
          cp target/release/*.so release/mongoodbc/bin/
          # TODO: Uncomment prior to merging back into master
          # cp ./LICENSE ./README.md ./mongo-odbc-driver.augmented.sbom.json release/mongoodbc/
          # TODO: Delete the following line prior merging back into master
          cp ./LICENSE ./README.md release/mongoodbc/
          cd release
          tar -czvf $UBUNTU_FILENAME mongoodbc/

  "setup driver on Windows":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          echo "Minor version: $MINOR_VERSION"
          sed -i 's@%DRIVER_DLL_PATH%@'"$(echo "$(cygpath -w $(pwd))" | sed s',\\,\\\\\\\\,g')"'@' setup/setupDSN.reg
          sed -i 's@%ADF_TEST_USER%@'"$(echo "${adf_test_local_user}" | sed s',\\,\\\\\\\\,g')"'@' setup/setupDSN.reg
          sed -i 's@%ADF_TEST_PWD%@'"$(echo "${adf_test_local_pwd}" | sed s',\\,\\\\\\\\,g')"'@' setup/setupDSN.reg
          sed -i 's@%ADF_TEST_URI%@'"$(echo "${adf_test_uri}" | sed s',\\,\\\\\\\\,g')"'@' setup/setupDSN.reg
          sed -i 's@%ADF_TEST_DB%@'"$(echo "${adf_test_local_db}" | sed s',\\,\\\\\\\\,g')"'@' setup/setupDSN.reg
          reg import "setup\setupDSN.reg"
          echo "----- Registry entries after setup ----"
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\ODBC\ODBCINST.INI\ODBC Drivers" -s 2> /dev/null
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers" -s 2> /dev/null
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\MongoDB Atlas SQL ODBC Driver" -s
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\ODBC\ODBCINST.INI\MongoDB Atlas SQL ODBC Driver" -s 2> /dev/null
          echo "-------------------------"

  "setup driver with UnixODBC":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          echo "-----   Setup driver with Unix ODBC   -----"
          # DRIVER_LIB_PATH should have been set by the compile task
          echo "DRIVER_LIB_PATH = $DRIVER_LIB_PATH"
          if [ ! -d  "$DRIVER_LIB_PATH" ]; then
            echo "$DRIVER_LIB_PATH directory does not exist. Built targets are:"
            ls ${DRIVER_LIB_PATH%/*}
          fi
          sed -i "s,%DRIVER_LIB_PATH%,$DRIVER_LIB_PATH,g" setup/odbcinst.ini
          echo "-------------------------"
          cat setup/odbcinst.ini
          echo "-------------------------"
          echo "----- DSN Setup -----"
          sed -i "s,%DRIVER_LIB_PATH%,$DRIVER_LIB_PATH,g" setup/odbc.ini
          sed -i "s,%ADF_TEST_DB%,${adf_test_local_db},g" setup/odbc.ini
          sed -i "s,%ADF_TEST_USER%,${adf_test_local_user},g" setup/odbc.ini
          sed -i "s,%ADF_TEST_PWD%,${adf_test_local_pwd},g" setup/odbc.ini
          sed -i "s,%ADF_TEST_HOST%,${adf_test_host},g" setup/odbc.ini
          cp setup/odbc.ini ~/.odbc.ini
          echo "---- END DSN Setup ----"

  "setup driver with iODBC":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          echo "-----   Setup driver with iODBC   -----"
          # DRIVER_LIB_PATH should have been set by the compile task
          echo "DRIVER_LIB_PATH = $DRIVER_LIB_PATH"
          if [ ! -d  "$DRIVER_LIB_PATH" ]; then
            echo "$DRIVER_LIB_PATH directory does not exist. Built targets are:"
            ls ${DRIVER_LIB_PATH%/*}
          fi
          sed -i.bu "s,%DRIVER_LIB_PATH%,$DRIVER_LIB_PATH,g" setup/iodbcinst.ini
          echo "-------------------------"
          cat setup/iodbcinst.ini
          echo "-------------------------"
          echo "----- DSN Setup -----"
          sed -i.bu "s,%DRIVER_LIB_PATH%,$DRIVER_LIB_PATH,g" setup/iodbc.ini
          sed -i.bu "s,%ADF_TEST_DB%,${adf_test_local_db},g" setup/iodbc.ini
          sed -i.bu "s,%ADF_TEST_USER%,${adf_test_local_user},g" setup/iodbc.ini
          sed -i.bu "s,%ADF_TEST_PWD%,${adf_test_local_pwd},g" setup/iodbc.ini
          sed -i.bu "s,%ADF_TEST_HOST%,${adf_test_host},g" setup/iodbc.ini
          echo "---- END DSN Setup ----"

          cat <<EOT >> expansions.yml
            export ODBCINSTINI="$ODBCSYSINI/iodbcinst.ini"
            export ODBCINI="$ODBCSYSINI/iodbc.ini"
          EOT
    - command: expansions.update
      params:
        file: mongosql-odbc-driver/expansions.yml

  "setup crash dump collection":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          mkdir $DUMP_PATH
          set +e
          echo "----- Registry entries before setup ----"
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps"
          REGQUERY_EXITCODE=$?
          if [ $REGQUERY_EXITCODE -eq 0 ]; then
            # The key exists, save the values
            echo "Saving values in $LOCAL_DUMP_ORIGINAL_REG_VAL"
            reg export "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" $LOCAL_DUMP_ORIGINAL_REG_VAL
            echo "----- Saved entries ----"
            cat $LOCAL_DUMP_ORIGINAL_REG_VAL
            echo "-------------------------"
          fi
          set -e
          sed -i 's@%$DUMP_PATH%@'"$(echo "$(cygpath -w $(pwd))\\$DUMP_FOLDER" | sed s',\\,\\\\\\\\,g')"'@' setup/setup_dumps_collection.reg
          echo "----- setup_dumps_collection.reg content -----"
          cat setup/setup_dumps_collection.reg
          echo "-------------------------"
          reg import "setup\setup_dumps_collection.reg"
          echo "----- Registry entries after setup ----"
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" -s 2> /dev/null
          echo "-------------------------"
          echo "App Data = $AppData"

  "clean-up driver on Windows":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          if [ 'windows-32' == '${build_variant}' ]; then
            sed -i 's@SOFTWARE@'"SOFTWARE\\\\Wow6432Node"'@' setup/cleanup_driver.reg
          fi
          reg import "setup\cleanup_driver.reg"
          echo "----- Registry entries after clean-up----"
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\ODBC\ODBCINST.INI\ODBC Drivers" -s 2> /dev/null
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\ODBC Drivers" -s 2> /dev/null
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBCINST.INI\MongoDB Atlas SQL ODBC Driver" -s 2> /dev/null
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\ODBC\ODBCINST.INI\MongoDB Atlas SQL ODBC Driver" -s 2> /dev/null
          echo "-------------------------"

  "clean-up crash dump collection":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          set +e
          # See what crash dump has been created. Checking the default path just in case
          echo "----- Dumps collected stored in $DUMP_PATH ----"
          ls -lrt $DUMP_PATH
          echo "-------------------------"
          echo "----- Dumps collected stored in the default dump folder %LOCALAPPDATA%\CrashDumps ----"
          ls -lrt /cygdrive/c/Users/Administrator/AppData/Local/CrashDumps
          echo "-------------------------"
          echo "----- Registry entries before clean-up ----"
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps"
          echo "-------------------------"
          if [ -f "$LOCAL_DUMP_ORIGINAL_REG_VAL" ]; then
            echo "Resetting initial registry values"
            cat $LOCAL_DUMP_ORIGINAL_REG_VAL
            reg import $LOCAL_DUMP_ORIGINAL_REG_VAL
          else
            echo "Resetting initial registry values - Deleting entry"
            reg import setup/cleanup_dumps_collection.reg
          fi
          EXITCODE=$?
          echo "----- Registry entries after clean-up ----"
          reg query "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" -s 2> /dev/null
          echo "-------------------------"
          exit $EXITCODE

  "run windows unit tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          RUST_BACKTRACE=1 cargo test unit

  "run windows integration tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        env:
          GITHUB_TOKEN: "${github_token}"
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          set +e
          export RUST_BACKTRACE=1
          ./resources/run_adf.sh start &&
          cargo run --bin data_loader &&
          cargo test integration -- --nocapture &&
          # Logger tests will delete existing logs, in order to avoid destroying important logs from our local environment
          # the test is feature gated and will only run on evergreen.
          # Logger tests also have to run in isolation because other tests running simultaneously will "pollute" the log file the logger tests analyse.
          cargo test --test connection_tests integration::test_driver_log_level --features evergreen_tests -- --nocapture
          EXITCODE=$?
          echo "****** ls -l ./target/debug/deps *******"
          ls -l ./target/debug/deps
          echo "****************************************"
          # The execution termimated with a segfault
          if [ $EXITCODE -eq 139 ]; then
            # Compress the sources and pdbs so that we'll have everything for debugging available in Evergreen after a run
            SOURCES_FOLDERS=$(find $(pwd) -path '*/src' | tr '\n' ' ')
            PDB_FILES=$(find $(pwd) -path '*/target/debug/deps/*test*.pdb' | tr '\n' ' ')
            echo "tar czvf "$DUMP_PATH/$MONGOODBC_DEBUGGING_INFO_ARCHIVE.tar.gz" $SOURCES_FOLDERS $PDB_FILES"
            tar czvf "$DUMP_PATH/$MONGOODBC_DEBUGGING_INFO_ARCHIVE.tar.gz" $SOURCES_FOLDERS $PDB_FILES

            echo "ls -l $DUMP_PATH"
            ls -l $DUMP_PATH
          fi
          ./resources/run_adf.sh stop
          exit $EXITCODE

  "install iODBC":
    - command: shell.exec
      type: system
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          mkdir -p "$INSTALLED_ODBC_PATH"
          cd installed_odbc
          echo "downloading iODBC"
          iODBC_dir=libiodbc-3.52.15
          curl -LO "https://github.com/openlink/iODBC/releases/download/v3.52.15/$iODBC_dir.tar.gz" \
            --silent \
            --fail \
            --max-time 60 \
            --retry 5 \
            --retry-delay 0
          tar xf "$iODBC_dir.tar.gz"
          cd "$iODBC_dir"
          ./configure --prefix="$INSTALLED_ODBC_PATH"
          make
          make install

  "install unix odbc":
    - command: shell.exec
      type: system
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          mkdir -p "$INSTALLED_ODBC_PATH"
          cd installed_odbc
          echo "downloading unixODBC"
          unixODBC_dir=unixODBC-2.3.6
          curl -O "http://noexpire.s3.amazonaws.com/sqlproxy/binary/linux/unixODBC-2.3.6.tar.gz" \
            --silent \
            --fail \
            --max-time 60 \
            --retry 5 \
            --retry-delay 0
          tar xf "$unixODBC_dir.tar.gz"
          cd "$unixODBC_dir"
          ./configure --prefix="$INSTALLED_ODBC_PATH" --with-pic
          make
          make install

  "run ubuntu unit tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          ~/.cargo/bin/rustup default stable

          # we only run ubuntu on the unit tests for now
          cargo test unit

  "run ubuntu rfc8252_http_server tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          ~/.cargo/bin/rustup default stable

          # run the rfc8252_http_server tests
          cargo test rfc8252_http_server -- --test-threads=1

  "run ubuntu integration tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        env:
          GITHUB_TOKEN: "${github_token}"
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          set +e
          echo "-------- ODBC related env variable ----------"
          echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
          echo "LIBRARY_PATH = $LIBRARY_PATH"
          echo "ODBCSYSINI = $ODBCSYSINI"
          echo "----------------------------------------------"

          ~/.cargo/bin/rustup default stable

          export RUST_BACKTRACE=1
          # Start a local ADF
          ./resources/run_adf.sh start && cargo run --bin data_loader &&

          # Run integration tests with ubuntu
          cargo test integration -- --nocapture &&
          # Logger tests will delete existing logs, in order to avoid destroying important logs from our local environment
          # the test is feature gated and will only run on evergreen.
          # Logger tests also have to run in isolation because other tests running simultaneously will "pollute" the log file the logger tests analyse.
          cargo test --test connection_tests integration::test_driver_log_level --features evergreen_tests -- --nocapture

          EXITCODE=$?

          # Stop the local ADF
          ./resources/run_adf.sh stop
          exit $EXITCODE

  "run ubuntu mongosqltranslate integration tests":
    - command: s3.get
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        remote_file: mongosqltranslate/libmongosqltranslate-v${LIBMONGOSQLTRANSLATE_VERSION}-linux-x86_64.so
        local_file: mongosql-odbc-driver/libmongosqltranslate.so
        bucket: translators-connectors-releases
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          sudo mv -f libmongosqltranslate.so target/release/libmongosqltranslate.so
          cargo test mongosqltranslate_tests -- --nocapture

  "run ubuntu cluster type integration tests":
    - command: s3.get
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        remote_file: mongosqltranslate/libmongosqltranslate-v${LIBMONGOSQLTRANSLATE_VERSION}-linux-x86_64.so
        local_file: mongosql-odbc-driver/libmongosqltranslate.so
        bucket: translators-connectors-releases
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}

          mdb_version_com="mongodb-linux-x86_64-ubuntu2204-7.0.14"
          mdb_version_ent="mongodb-linux-x86_64-enterprise-ubuntu2204-7.0.14"
          arch="x64"

          # Start MongoDB instances
          ./resources/start_local_mdb.sh $mdb_version_com $mdb_version_ent $arch

          # Enterprise test without library
          cargo test --features cluster_type_tests -- \
            cluster_type::test_determine_cluster_type_enterprise_fails_without_library --nocapture
          ENTERPRISE_NOLIB_EXITCODE=$?

          # Move mongosqltranslate library to the correct location
          sudo mv -f libmongosqltranslate.so target/release/libmongosqltranslate.so

          # Enterprise test with library
          cargo test --features cluster_type_tests -- \
            cluster_type::test_enterprise_with_library_fails_due_to_missing_sql_get_result_schema_command --nocapture
          ENTERPRISE_LIB_EXITCODE=$?

          # Community test
          cargo test --features cluster_type_tests -- cluster_type::test_determine_cluster_type_community_fails --nocapture
          COMMUNITY_EXITCODE=$?

          # Stop MongoDB instances
          pkill mongod

          # Determine overall exit code
          if [ $ENTERPRISE_NOLIB_EXITCODE -eq 0 ] && [ $ENTERPRISE_LIB_EXITCODE -eq 0 ] && [ $COMMUNITY_EXITCODE -eq 0 ]; then
            OVERALL_EXITCODE=0
          else
            OVERALL_EXITCODE=1
          fi

          echo "Cluster test results:"
          echo "Enterprise test without library exit code: $ENTERPRISE_NOLIB_EXITCODE"
          echo "Enterprise test with library exit code: $ENTERPRISE_LIB_EXITCODE"
          echo "Community test exit code: $COMMUNITY_EXITCODE"
          echo "Overall exit code: $OVERALL_EXITCODE"

          exit $OVERALL_EXITCODE

  "run macos result-set tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        env:
          GITHUB_TOKEN: "${github_token}"
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          set +e
          echo "-------- ODBC related env variable ----------"
          echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
          echo "LIBRARY_PATH = $LIBRARY_PATH"
          echo "ODBCINSTINI = $ODBCINSTINI"
          echo "----------------------------------------------"

          ~/.cargo/bin/rustup default stable

          export RUST_BACKTRACE=1
          # Start a local ADF
          ./resources/run_adf.sh start && cargo run --bin data_loader &&

          # Run integration tests with macos
          cargo test --package integration_test --lib test_runner --features definitions/iodbc,cstr/utf32,integration_test/result_set
          EXITCODE=$?

          # Stop the local ADF
          ./resources/run_adf.sh stop
          exit $EXITCODE

  "run macos unit tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          ~/.cargo/bin/rustup default stable

          cargo test unit

  "run macos integration tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        env:
          GITHUB_TOKEN: "${github_token}"
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          set +e
          echo "-------- ODBC related env variable ----------"
          echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
          echo "LIBRARY_PATH = $LIBRARY_PATH"
          echo "ODBCINSTINI = $ODBCINSTINI"
          echo "----------------------------------------------"

          ~/.cargo/bin/rustup default stable

          export RUST_BACKTRACE=1
          # Start a local ADF
          ./resources/run_adf.sh start && cargo run --bin data_loader &&

          # Run integration tests with macos
          cargo test --features definitions/iodbc,cstr/utf32 integration -- --nocapture &&
          # Logger tests will delete existing logs, in order to avoid destroying important logs from our local environment
          # the test is feature gated and will only run on evergreen.
          # Logger tests also have to run in isolation because other tests running simultaneously will "pollute" the log file the logger tests analyse.
          cargo test --test connection_tests integration::test_driver_log_level --features evergreen_tests,definitions/iodbc,cstr/utf32 -- --nocapture
          EXITCODE=$?

          # Stop the local ADF
          ./resources/run_adf.sh stop
          exit $EXITCODE

  "run ubuntu result-set tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        env:
          GITHUB_TOKEN: "${github_token}"
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          set +e
          echo "-------- ODBC related env variable ----------"
          echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
          echo "LIBRARY_PATH = $LIBRARY_PATH"
          echo "ODBCSYSINI = $ODBCSYSINI"
          echo "----------------------------------------------"

          ~/.cargo/bin/rustup default stable

          export RUST_BACKTRACE=1
          # Start a local ADF
          ./resources/run_adf.sh start && cargo run --bin data_loader &&

          # Run integration tests with ubuntu
          cargo test --package integration_test --lib test_runner --features integration_test/result_set
          EXITCODE=$?

          # Stop the local ADF
          ./resources/run_adf.sh stop
          exit $EXITCODE

  "run asan unit tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          ~/.cargo/bin/rustup default nightly
          ~/.cargo/bin/rustup target add x86_64-unknown-linux-gnu

          export RUSTFLAGS="-Z sanitizer=leak"
          # we only run asan on the unit tests for now
          cargo test --target x86_64-unknown-linux-gnu unit

  "run asan integration tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        env:
          GITHUB_TOKEN: "${github_token}"
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          set +e
          echo "-------- ODBC related env variable ----------"
          echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
          echo "LIBRARY_PATH = $LIBRARY_PATH"
          echo "ODBCSYSINI = $ODBCSYSINI"
          echo "----------------------------------------------"

          export RUSTFLAGS="-Z sanitizer=leak"
          export RUST_BACKTRACE=1
          echo "env $(env)"

          ~/.cargo/bin/rustup default nightly
          ~/.cargo/bin/rustup target add x86_64-unknown-linux-gnu

          # Start a local ADF
          ./resources/run_adf.sh start && cargo run --bin data_loader &&

          # Run integration tests with asan
          cargo test --target x86_64-unknown-linux-gnu integration -- --nocapture &&
          # Logger tests will delete existing logs, in order to avoid destroying important logs from our local environment
          # the test is feature gated and will only run on evergreen.
          # Logger tests also have to run in isolation because other tests running simultaneously will "pollute" the log file the logger tests analyse.
          cargo test --target x86_64-unknown-linux-gnu --test connection_tests integration::test_driver_log_level --features evergreen_tests -- --nocapture
          EXITCODE=$?

          # Stop the local ADF
          ./resources/run_adf.sh stop
          exit $EXITCODE

  "run asan result-set tests":
    - command: shell.exec
      type: test
      params:
        shell: bash
        env:
          GITHUB_TOKEN: "${github_token}"
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          set +e
          echo "-------- ODBC related env variable ----------"
          echo "LD_LIBRARY_PATH = $LD_LIBRARY_PATH"
          echo "LIBRARY_PATH = $LIBRARY_PATH"
          echo "ODBCSYSINI = $ODBCSYSINI"
          echo "----------------------------------------------"

          ~/.cargo/bin/rustup default nightly
          ~/.cargo/bin/rustup target add x86_64-unknown-linux-gnu
          export RUSTFLAGS="-Z sanitizer=leak"

          export RUST_BACKTRACE=1
          # Start a local ADF
          ./resources/run_adf.sh start && cargo run --bin data_loader &&

          # Run integration tests with asan
          cargo test --target x86_64-unknown-linux-gnu --package integration_test --lib test_runner --features integration_test/result_set
          EXITCODE=$?

          # Stop the local ADF
          ./resources/run_adf.sh stop
          exit $EXITCODE

  "run windows result set test":
    command: shell.exec
    type: test
    params:
      shell: bash
      env:
        GITHUB_TOKEN: "${github_token}"
      working_dir: mongosql-odbc-driver
      script: |
        ${prepare_shell}
        set +e
        export RUST_BACKTRACE=1
        ./resources/run_adf.sh start &&
        cargo run --bin data_loader &&
        cargo test --package integration_test --lib test_runner --features integration_test/result_set
        EXITCODE=$?
        # The execution termimated with a segfault
        if [ $EXITCODE -eq 139 ]; then
            # Compress the sources and pdbs so that we'll have everything for debugging available in Evergreen after a run
            SOURCES_FOLDERS=$(find $(pwd) -path '*/src' | tr '\n' ' ')
            PDB_FILES=$(find $(pwd) -path '*/target/debug/deps/*test*.pdb' | tr '\n' ' ')
            echo "tar czvf "$DUMP_PATH/$MONGOODBC_DEBUGGING_INFO_ARCHIVE.tar.gz" $SOURCES_FOLDERS $PDB_FILES"
            tar czvf "$DUMP_PATH/$MONGOODBC_DEBUGGING_INFO_ARCHIVE.tar.gz" $SOURCES_FOLDERS $PDB_FILES
        fi
        ./resources/run_adf.sh stop
        exit $EXITCODE

  "upload start_adf logs":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/local_adf/logs/mongohoused.log
        remote_file: mongosql-odbc-driver/artifacts/logs/${version_id}/${build_variant}/mongohoused.log
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/local_adf/logs/mongodb_test.log
        remote_file: mongosql-odbc-driver/artifacts/logs/${version_id}/${build_variant}/mongodb_test.log
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream

  "upload crash debugging info":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter_prefix: mongosql-odbc-driver/dumps
        local_files_include_filter:
          - "*.dmp"
          - "*.tar.gz"
        remote_file: mongosql-odbc-driver/artifacts/logs/${version_id}/${build_variant}/
        bucket: mciuploads
        permissions: public-read
        content_type: application/octet-stream
        display_name: crash-dump-

  "trace artifacts":
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          mkdir papertrail
    - command: s3.get
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/papertrail/${MSI_FILENAME}
        remote_file: ${WINDOWS_INSTALLER_PATH}
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: s3.get
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/papertrail/${UBUNTU_FILENAME}
        remote_file: ${UBUNTU2204_INSTALLER_PATH}
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/octet-stream
    - command: papertrail.trace
      params:
        work_dir: mongosql-odbc-driver
        key_id: ${papertrail_id}
        secret_key: ${papertrail_key}
        product: mongo-odbc-driver
        version: ${RELEASE_VERSION}
        filenames:
          - papertrail/*

  "update download center feed":
    # Download the current json feed used by the download center
    - command: s3.get
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        remote_file: mongosql-odbc-driver/mongo-odbc-downloads.json
        local_file: mongosql-odbc-driver/resources/download-center/mongo-odbc-downloads.json
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/json
    # Update the file, adding the latest release
    - command: shell.exec
      params:
        shell: bash
        working_dir: mongosql-odbc-driver/resources/download-center/
        script: |
          ${prepare_shell}
          # Make sure to only allow releases from the trunk of the project. If the name changes,
          # this will need be updated.
          if [[ $(git branch --show-current) != 'master' ]]; then
             exit 0
          fi
          # Update the template to generate the feed for this release
          sed -i 's@{RELEASE_VERSION}@'${RELEASE_VERSION}'@' mongo-odbc-downloads_template.json
          sed -i 's@{WINDOWS_INSTALLER_PATH}@'${WINDOWS_INSTALLER_PATH}'@' mongo-odbc-downloads_template.json
          sed -i 's@{UBUNTU2204_INSTALLER_PATH}@'${UBUNTU2204_INSTALLER_PATH}'@' mongo-odbc-downloads_template.json
          echo "--------- New release object ----------------"
          cat mongo-odbc-downloads_template.json
          echo "---------------------------------------------"
          NEW_VERSION=$(cat mongo-odbc-downloads_template.json)

          # The task runs on the variant used for Release (Ubuntu). Download the Linux build of JQ
          curl -L -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 \
            --silent \
            --fail \
            --max-time 60 \
            --retry 5 \
            --retry-delay 0

          chmod +x jq

          # Add the new release, sort by version and reverse the array
          jq --argjson new_version "$NEW_VERSION" '.versions += [ $new_version ] | .versions |= sort_by(.version) | .versions |= reverse' mongo-odbc-downloads.json > mongo-odbc-downloads_updated.json

          echo "----------- Updated download list -------------"
          cat mongo-odbc-downloads_updated.json
          echo "-----------------------------------------------"
    # Re-upload the updated file
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/resources/download-center/mongo-odbc-downloads_updated.json
        remote_file: mongosql-odbc-driver/mongo-odbc-downloads.json
        bucket: translators-connectors-releases
        permissions: public-read
        content_type: application/json

  "generate static code analysis":
    - command: shell.exec
      type: test
      params:
        shell: bash
        working_dir: mongosql-odbc-driver
        script: |
          ${prepare_shell}
          export SEMGREP_APP_TOKEN=${semgrep_app_token}
          echo "Running static code analysis with Semgrep..."

          # Setup or use the existing virtualenv for semgrep
          if [[ -f "venv/bin/activate" ]]; then
              echo 'using existing virtualenv'
              . venv/bin/activate
          else
              echo 'Creating new virtualenv'
              python3 -m virtualenv venv
              echo 'Activating new virtualenv'
              . venv/bin/activate
          fi
          python3 -m pip install semgrep
          # Confirm semgrep version
          semgrep --version
          set +e
          semgrep --config p/rust --sarif --exclude "integration_test" --verbose --error --severity=ERROR --sarif-output=mongo-odbc-driver.sast.sarif > mongo-odbc-driver.sast.cmd.verbose.out 2>&1
          SCAN_RESULT=$?
          set -e
          # Exit with a failure if the scan found an issue
          exit $SCAN_RESULT
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
          - mongo-odbc-driver.sast.*
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/ssdlc/
        content_type: text/plain
        bucket: mciuploads
        permissions: public-read

  "publish static code analysis":
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongosql-odbc-driver/${STATIC_CODE_ANALYSIS_NAME}
        remote_file: mongosql-odbc-driver/artifacts/${version_id}/ssdlc/${STATIC_CODE_ANALYSIS_NAME}
        content_type: application/json
        bucket: mciuploads
    - command: s3.put
      params:
        aws_key: ${release_aws_key}
        aws_secret: ${release_aws_secret}
        local_file: mongosql-odbc-driver/${STATIC_CODE_ANALYSIS_NAME}
        remote_file: mongosql-odbc-driver/mongo-odbc-${RELEASE_VERSION}.sast.sarif
        content_type: application/json
        bucket: translators-connectors-releases
        permissions: public-read
        display_name: mongo-odbc-${RELEASE_VERSION}.sast.sarif

pre:
  - func: "fetch source"
  - func: "generate expansions"
post:
  - func: "upload start_adf logs"

tasks:
  - name: make-odbc-docs
    depends_on:
      - name: compile
    commands:
      - func: "build odbc documentation"
        run_on: ubuntu2004-large
      - func: "upload odbc docs"
  - name: clippy
    commands:
      - func: "install rust toolchain"
      - func: "check clippy"

  - name: rustfmt
    commands:
      - func: "install rust toolchain"
      - func: "check rustfmt"

  - name: unused-deps
    commands:
      - func: "install rust toolchain"
      - func: "check unused dependencies"

  - name: sbom
    # TODO: Remove the following prior to merging back to master
    disable: true
    commands:
      - func: "install rust toolchain"
      - func: set and check packages version
      - func: "generate SBOM"
      - func: "scan SBOM"
      - func: "push SBOM Lite to Silk"
      - func: "pull augmented SBOM from Silk"

  - name: compile
    # TODO: Uncomment the following block prior to merging back to master
    # depends_on:
    #   - name: sbom
    #     variant: code-quality-security
    commands:
      - func: "install iODBC"
        variants: [macos, macos-arm]
      - func: "install rust toolchain"
        variants: [ubuntu2204, windows-64, macos, macos-arm]
      - func: "install unix odbc"
        variants: [ubuntu2204]
      - func: "set and check packages version"
      - func: "compile ubuntu and win release"
        variants: [ubuntu2204, windows-64]
      - func: "compile macos release"
        variants: [macos, macos-arm]
      - func: "fetch mongosqltranslate"
        variants: [windows-64]
        vars:
          arch: "x86_64"
          platform: "win"
          lib_prefix: ""
          ext: "dll"
      - func: "build msi"
        variants: [windows-64]
      - func: "fetch mongosqltranslate"
        variants: [ubuntu2204]
        vars:
          arch: "x86_64"
          platform: "linux"
          lib_prefix: "lib"
          ext: "so"
      - func: "tar linux artifacts"
        variants: [ubuntu2204]
      - func: "fetch mongosqltranslate"
        variants: [macos]
        vars:
          arch: "x86_64"
          platform: "macos"
          lib_prefix: "lib"
          ext: "dylib"
      - func: "fetch mongosqltranslate"
        variants: [macos-arm]
        vars:
          arch: "arm"
          platform: "macos"
          lib_prefix: "lib"
          ext: "dylib"
      - func: "build dmg"
        variants: [macos, macos-arm]
      - func: "mciuploads release artifacts"

  - name: unit-test
    commands:
      - func: "install rust toolchain"
        variants: [ubuntu2204, windows-64, macos, macos-arm]
      - func: "install iODBC"
        variants: [macos, macos-arm]
      - func: "install unix odbc"
        variants: [ubuntu2204]
      - func: "run windows unit tests"
        variants: [windows-64]
      - func: "run ubuntu unit tests"
        variants: [ubuntu2204]
      - func: "run ubuntu rfc8252_http_server tests"
        variants: [ubuntu2204]
      - func: "run macos unit tests"
        variants: [macos, macos-arm]

  - name: integration-test
    depends_on:
      - name: compile
    commands:
      - func: "install rust toolchain"
        variants: [ubuntu2204, windows-64, macos, macos-arm]
      - func: "install iODBC"
        variants: [macos, macos-arm]
      - func: "install unix odbc"
        variants: [ubuntu2204]
      - func: "compile release with debug info"
        variants: [ubuntu2204]
      - func: "compile macos release with debug info"
        variants: [macos, macos-arm]
      - func: "setup driver with UnixODBC"
        variants: [ubuntu2204]
      - func: "setup driver with iODBC"
        variants: [macos, macos-arm]
      - func: "generate github token"
      - func: "run ubuntu integration tests"
        variants: [ubuntu2204]
      - func: "run ubuntu cluster type integration tests"
        variants: [ubuntu2204]
      - func: "run ubuntu mongosqltranslate integration tests"
        variants: [ubuntu2204]
      # Commenting out because the following task only detects
      # memory leaks in the tests
      # - func: "run asan integration tests"
      #   variants: [ ubuntu2204 ]
      - func: "run windows integration tests"
        variants: [windows-64]
      - func: "run macos integration tests"
        variants: [macos, macos-arm]

  - name: asan-unit-tests
    commands:
      - func: "install rust toolchain"
        variants: [ubuntu2204]
      - func: "install unix odbc"
        variants: [ubuntu2204]
      - func: "run asan unit tests"
        variants: [ubuntu2204]

  - name: asan-compile
    commands:
      - func: "install rust toolchain"
        variants: [ubuntu2204]
      - func: "compile ubuntu with asan"
        variants: [ubuntu2204]

  # disabled macos result-set-tests as part of SQL-1688
  - name: result-set-test
    depends_on:
      - name: compile
    commands:
      - func: "install rust toolchain"
        variants: [ubuntu2204, windows-64, macos, macos-arm]
      # - func: "install iODBC"
      #   variants: [macos, macos-arm]
      - func: "install unix odbc"
        variants: [ubuntu2204]
      - func: "compile release with debug info"
        variants: [ubuntu2204]
      # - func: "compile macos release with debug info"
      #   variants: [macos, macos-arm]
      - func: "setup driver with UnixODBC"
        variants: [ubuntu2204]
      # - func: "setup driver with iODBC"
      #   variants: [macos, macos-arm]
      - func: "generate github token"
      - func: "run windows result set test"
        variants: [windows-64]
      - func: "run ubuntu result-set tests"
        variants: [ubuntu2204]
      # - func: "run macos result-set tests"
      #   variants: [macos, macos-arm]
      # Commenting out because the following task only detects
      # memory leaks in the tests
      # - func: "run asan result-set tests"
      #   variants: [ ubuntu2204 ]

  - name: sign
    allowed_requesters: ["ad_hoc", "github_tag"]
    depends_on:
      - name: compile
    commands:
      - func: "fetch for windows sign"
        variants: [windows-64]
      - func: "fetch for ubuntu sign"
        variants: [ubuntu2204]
      - func: "sign windows"
        variants: [windows-64]
      - func: "sign ubuntu and verify signature"
        variants: [ubuntu2204]
      - func: "upload signed windows artifacts"
        variants: [windows-64]
      - func: "upload ubuntu sig file"
        variants: [ubuntu2204]

  - name: snapshot
    depends_on:
      - name: compile
        variant: "*"
      - name: clippy
        variant: "*"
      - name: rustfmt
        variant: "*"
      - name: unit-test
        variant: ".release-variant"
      - name: integration-test
        variant: ".release-variant"
      - name: result-set-test
        variant: ".release-variant"
      - name: sign
        variant: ".release-variant"
    commands:
      - func: "upload release"

  - name: trace-artifacts
    # TODO: remove this before merging eap branch back into main branch
    disable: true
    git_tag_only: true
    depends_on:
      - name: release
    commands:
      - func: "trace artifacts"

  - name: download-center-update
    # TODO: remove this before merging eap branch back into main branch, to allow download center to update.
    disable: true
    git_tag_only: true
    depends_on:
      - name: trace-artifacts
    commands:
      - func: "update download center feed"

  - name: release
    allowed_requesters: ["github_tag", "patch"]
    depends_on:
      - name: compile
        variant: "*"
      - name: sign
        variant: ".release-variant"
    commands:
      - func: "build odbc documentation"
      - func: "upload odbc docs"
      - func: "upload release"

  - name: semgrep
    exec_timeout_secs: 3600 # 1h
    commands:
      - func: "generate static code analysis"

  - name: ssdlc-artifacts-release
    # TODO: remove this before merging eap branch back into main branch
    disable: true
    run_on: ubuntu2204-small
    git_tag_only: true
    depends_on:
      - name: "release"
        variant: "release"
      - name: sbom
        variant: code-quality-security
      - name: semgrep
        variant: code-quality-security
    exec_timeout_secs: 300 # 5m
    commands:
      - func: "publish static code analysis"
      - func: "publish augmented SBOM"
      - func: "generate compliance report"
      - func: "publish compliance report"

  - name: ssdlc-artifacts-snapshot
    # TODO: remove this before merging eap branch back into main branch
    disable: true
    run_on: ubuntu2204-small
    allow_for_git_tag: false
    depends_on:
      - name: sbom
        variant: code-quality-security
      - name: semgrep
        variant: code-quality-security
    exec_timeout_secs: 300 # 5m
    commands:
      - func: "publish static code analysis"
      - func: "publish augmented SBOM"
      - func: "generate compliance report"
      - func: "publish compliance report"

task_groups:
  - name: windows-windows-test-unit-group
    setup_group_can_fail_task: false
    setup_group:
      - func: "fetch source"
      - func: "generate expansions"
    tasks:
      - unit-test

  - name: windows-test-integration-group
    setup_group_can_fail_task: false
    setup_group:
      - func: "fetch source"
      - func: "generate expansions"
      - func: "download artifact"
      - func: "setup driver on Windows"
      - func: "setup crash dump collection"
    teardown_group:
      - func: "upload crash debugging info"
      - func: "clean-up driver on Windows"
      - func: "clean-up crash dump collection"
    tasks:
      - integration-test

  - name: windows-test-result-set-group
    setup_group_can_fail_task: false
    setup_group:
      - func: "fetch source"
      - func: "generate expansions"
      - func: "download artifact"
      - func: "setup driver on Windows"
      - func: "setup crash dump collection"
    teardown_group:
      - func: "upload crash debugging info"
      - func: "clean-up driver on Windows"
      - func: "clean-up crash dump collection"
    tasks:
      - result-set-test

buildvariants:
  - name: static-analysis
    display_name: "* Static Analysis"
    run_on: [ubuntu2004-test]
    tasks:
      - name: clippy
      - name: rustfmt
      - name: unused-deps
      - name: asan-compile

  - name: code-quality-security
    display_name: "Code Quality and Security"
    run_on: [ubuntu2204-small]
    tasks:
      - name: semgrep
      # TODO: Uncomment the following block prior to merging back to master
      # - name: sbom
      # - name: ssdlc-artifacts-snapshot

  - name: windows-64
    tags: ["release-variant"]
    display_name: Windows (64-bit)
    run_on: [windows-64-vs2019-large]
    tasks:
      - name: compile
      - name: windows-windows-test-unit-group
      - name: windows-test-integration-group
      - name: windows-test-result-set-group
      - name: sign
        run_on: ubuntu2204-large

  - name: ubuntu2204
    tags: ["release-variant"]
    display_name: Ubuntu 22.04
    run_on: [ubuntu2204-large]
    tasks:
      - name: compile
      - name: unit-test
      - name: integration-test
      - name: result-set-test
      - name: asan-unit-tests
      - name: sign

  - name: macos
    display_name: "macOS"
    run_on: [macos-11]
    tasks:
      - name: compile
      - name: unit-test
      # SQL-1841: Investigate iodbc hanging with odbc 2 integration tests
      # - name: integration-test
      - name: result-set-test

  - name: macos-arm
    display_name: "macOS arm64"
    run_on: [macos-13-arm64]
    tasks:
      - name: compile
      - name: unit-test
      # SQL-1841: Investigate iodbc hanging with odbc 2 integration tests
      # - name: integration-test
      - name: result-set-test

  - name: release
    display_name: "Release"
    run_on: [ubuntu2004-medium]
    tasks:
      - name: make-odbc-docs
      - name: release
      - name: snapshot
      # - name: trace-artifacts
      # - name: download-center-update
      # - name: ssdlc-artifacts-release
